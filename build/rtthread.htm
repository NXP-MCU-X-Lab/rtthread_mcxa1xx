<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\build\rtthread.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\build\rtthread.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6230001: Last Updated: Tue Jul  8 15:55:26 2025
<BR><P>
<H3>Maximum Stack Usage =       1208 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main_thread_entry &rArr; $Super$$main &rArr; ADC_DMA_Timer_Init &rArr; EDMA_PrepareTransfer &rArr; EDMA_PrepareTransferConfig &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[1]">Reset_Handler</a>
 <LI><a href="#[9c]">ADC0_DriverIRQHandler</a>
 <LI><a href="#[5]">BusFault_Handler</a>
 <LI><a href="#[84]">CDOG0_DriverIRQHandler</a>
 <LI><a href="#[5f]">CMC_DriverIRQHandler</a>
 <LI><a href="#[9e]">CMP0_DriverIRQHandler</a>
 <LI><a href="#[9f]">CMP1_DriverIRQHandler</a>
 <LI><a href="#[9]">DebugMon_Handler</a>
 <LI><a href="#[0]">DefaultISR</a>
 <LI><a href="#[69]">ERM0_MULTI_BIT_DriverIRQHandler</a>
 <LI><a href="#[68]">ERM0_SINGLE_BIT_DriverIRQHandler</a>
 <LI><a href="#[8b]">FLEXPWM0_FAULT_DriverIRQHandler</a>
 <LI><a href="#[8a]">FLEXPWM0_RELOAD_ERROR_DriverIRQHandler</a>
 <LI><a href="#[8c]">FLEXPWM0_SUBMODULE0_DriverIRQHandler</a>
 <LI><a href="#[8d]">FLEXPWM0_SUBMODULE1_DriverIRQHandler</a>
 <LI><a href="#[8e]">FLEXPWM0_SUBMODULE2_DriverIRQHandler</a>
 <LI><a href="#[6a]">FMU0_DriverIRQHandler</a>
 <LI><a href="#[94]">FREQME0_DriverIRQHandler</a>
 <LI><a href="#[6b]">GLIKEY0_DriverIRQHandler</a>
 <LI><a href="#[a5]">GPIO0_DriverIRQHandler</a>
 <LI><a href="#[a6]">GPIO1_DriverIRQHandler</a>
 <LI><a href="#[a7]">GPIO2_DriverIRQHandler</a>
 <LI><a href="#[a8]">GPIO3_DriverIRQHandler</a>
 <LI><a href="#[7a]">LPSPI0_DriverIRQHandler</a>
 <LI><a href="#[7b]">LPSPI1_DriverIRQHandler</a>
 <LI><a href="#[95]">LPTMR0_DriverIRQHandler</a>
 <LI><a href="#[6c]">MBC0_DriverIRQHandler</a>
 <LI><a href="#[90]">QDC0_COMPARE_DriverIRQHandler</a>
 <LI><a href="#[91]">QDC0_HOME_DriverIRQHandler</a>
 <LI><a href="#[93]">QDC0_INDEX_DriverIRQHandler</a>
 <LI><a href="#[92]">QDC0_WATCHDOG_DriverIRQHandler</a>
 <LI><a href="#[5e]">Reserved16_DriverIRQHandler</a>
 <LI><a href="#[64]">Reserved22_DriverIRQHandler</a>
 <LI><a href="#[65]">Reserved23_DriverIRQHandler</a>
 <LI><a href="#[66]">Reserved24_DriverIRQHandler</a>
 <LI><a href="#[67]">Reserved25_DriverIRQHandler</a>
 <LI><a href="#[6f]">Reserved33_DriverIRQHandler</a>
 <LI><a href="#[71]">Reserved35_DriverIRQHandler</a>
 <LI><a href="#[72]">Reserved36_DriverIRQHandler</a>
 <LI><a href="#[73]">Reserved37_DriverIRQHandler</a>
 <LI><a href="#[74]">Reserved38_DriverIRQHandler</a>
 <LI><a href="#[75]">Reserved39_DriverIRQHandler</a>
 <LI><a href="#[77]">Reserved41_DriverIRQHandler</a>
 <LI><a href="#[79]">Reserved43_DriverIRQHandler</a>
 <LI><a href="#[7c]">Reserved46_DriverIRQHandler</a>
 <LI><a href="#[80]">Reserved50_DriverIRQHandler</a>
 <LI><a href="#[81]">Reserved51_DriverIRQHandler</a>
 <LI><a href="#[83]">Reserved53_DriverIRQHandler</a>
 <LI><a href="#[88]">Reserved58_DriverIRQHandler</a>
 <LI><a href="#[89]">Reserved59_DriverIRQHandler</a>
 <LI><a href="#[8f]">Reserved65_DriverIRQHandler</a>
 <LI><a href="#[96]">Reserved72_DriverIRQHandler</a>
 <LI><a href="#[9b]">Reserved77_DriverIRQHandler</a>
 <LI><a href="#[9d]">Reserved79_DriverIRQHandler</a>
 <LI><a href="#[a0]">Reserved82_DriverIRQHandler</a>
 <LI><a href="#[a1]">Reserved83_DriverIRQHandler</a>
 <LI><a href="#[a2]">Reserved84_DriverIRQHandler</a>
 <LI><a href="#[a3]">Reserved85_DriverIRQHandler</a>
 <LI><a href="#[a4]">Reserved86_DriverIRQHandler</a>
 <LI><a href="#[a9]">Reserved91_DriverIRQHandler</a>
 <LI><a href="#[aa]">Reserved92_DriverIRQHandler</a>
 <LI><a href="#[ab]">Reserved93_DriverIRQHandler</a>
 <LI><a href="#[ac]">Reserved94_DriverIRQHandler</a>
 <LI><a href="#[ad]">Reserved95_DriverIRQHandler</a>
 <LI><a href="#[6d]">SCG0_DriverIRQHandler</a>
 <LI><a href="#[6e]">SPC0_DriverIRQHandler</a>
 <LI><a href="#[7]">SecureFault_Handler</a>
 <LI><a href="#[82]">USB0_DriverIRQHandler</a>
 <LI><a href="#[6]">UsageFault_Handler</a>
 <LI><a href="#[70]">WUU0_DriverIRQHandler</a>
 <LI><a href="#[9a]">WWDT0_DriverIRQHandler</a>
 <LI><a href="#[2]">NMI_Handler</a>
 <LI><a href="#[c]">Reserved16_IRQHandler</a>
 <LI><a href="#[d]">CMC_IRQHandler</a>
 <LI><a href="#[e]">DMA_CH0_IRQHandler</a>
 <LI><a href="#[f]">DMA_CH1_IRQHandler</a>
 <LI><a href="#[11]">DMA_CH3_IRQHandler</a>
 <LI><a href="#[12]">Reserved22_IRQHandler</a>
 <LI><a href="#[13]">Reserved23_IRQHandler</a>
 <LI><a href="#[14]">Reserved24_IRQHandler</a>
 <LI><a href="#[15]">Reserved25_IRQHandler</a>
 <LI><a href="#[16]">ERM0_SINGLE_BIT_IRQHandler</a>
 <LI><a href="#[17]">ERM0_MULTI_BIT_IRQHandler</a>
 <LI><a href="#[18]">FMU0_IRQHandler</a>
 <LI><a href="#[19]">GLIKEY0_IRQHandler</a>
 <LI><a href="#[1a]">MBC0_IRQHandler</a>
 <LI><a href="#[1b]">SCG0_IRQHandler</a>
 <LI><a href="#[1c]">SPC0_IRQHandler</a>
 <LI><a href="#[1d]">Reserved33_IRQHandler</a>
 <LI><a href="#[1e]">WUU0_IRQHandler</a>
 <LI><a href="#[1f]">Reserved35_IRQHandler</a>
 <LI><a href="#[20]">Reserved36_IRQHandler</a>
 <LI><a href="#[21]">Reserved37_IRQHandler</a>
 <LI><a href="#[22]">Reserved38_IRQHandler</a>
 <LI><a href="#[23]">Reserved39_IRQHandler</a>
 <LI><a href="#[24]">I3C0_IRQHandler</a>
 <LI><a href="#[25]">Reserved41_IRQHandler</a>
 <LI><a href="#[26]">LPI2C0_IRQHandler</a>
 <LI><a href="#[27]">Reserved43_IRQHandler</a>
 <LI><a href="#[28]">LPSPI0_IRQHandler</a>
 <LI><a href="#[29]">LPSPI1_IRQHandler</a>
 <LI><a href="#[2a]">Reserved46_IRQHandler</a>
 <LI><a href="#[2c]">LPUART1_IRQHandler</a>
 <LI><a href="#[2d]">LPUART2_IRQHandler</a>
 <LI><a href="#[2e]">Reserved50_IRQHandler</a>
 <LI><a href="#[2f]">Reserved51_IRQHandler</a>
 <LI><a href="#[30]">USB0_IRQHandler</a>
 <LI><a href="#[31]">Reserved53_IRQHandler</a>
 <LI><a href="#[32]">CDOG0_IRQHandler</a>
 <LI><a href="#[33]">CTIMER0_IRQHandler</a>
 <LI><a href="#[34]">CTIMER1_IRQHandler</a>
 <LI><a href="#[35]">CTIMER2_IRQHandler</a>
 <LI><a href="#[36]">Reserved58_IRQHandler</a>
 <LI><a href="#[37]">Reserved59_IRQHandler</a>
 <LI><a href="#[38]">FLEXPWM0_RELOAD_ERROR_IRQHandler</a>
 <LI><a href="#[39]">FLEXPWM0_FAULT_IRQHandler</a>
 <LI><a href="#[3a]">FLEXPWM0_SUBMODULE0_IRQHandler</a>
 <LI><a href="#[3b]">FLEXPWM0_SUBMODULE1_IRQHandler</a>
 <LI><a href="#[3c]">FLEXPWM0_SUBMODULE2_IRQHandler</a>
 <LI><a href="#[3d]">Reserved65_IRQHandler</a>
 <LI><a href="#[3e]">QDC0_COMPARE_IRQHandler</a>
 <LI><a href="#[3f]">QDC0_HOME_IRQHandler</a>
 <LI><a href="#[40]">QDC0_WATCHDOG_IRQHandler</a>
 <LI><a href="#[41]">QDC0_INDEX_IRQHandler</a>
 <LI><a href="#[42]">FREQME0_IRQHandler</a>
 <LI><a href="#[43]">LPTMR0_IRQHandler</a>
 <LI><a href="#[44]">Reserved72_IRQHandler</a>
 <LI><a href="#[45]">OS_EVENT_IRQHandler</a>
 <LI><a href="#[46]">WAKETIMER0_IRQHandler</a>
 <LI><a href="#[47]">UTICK0_IRQHandler</a>
 <LI><a href="#[48]">WWDT0_IRQHandler</a>
 <LI><a href="#[49]">Reserved77_IRQHandler</a>
 <LI><a href="#[4a]">ADC0_IRQHandler</a>
 <LI><a href="#[4b]">Reserved79_IRQHandler</a>
 <LI><a href="#[4c]">CMP0_IRQHandler</a>
 <LI><a href="#[4d]">CMP1_IRQHandler</a>
 <LI><a href="#[4e]">Reserved82_IRQHandler</a>
 <LI><a href="#[4f]">Reserved83_IRQHandler</a>
 <LI><a href="#[50]">Reserved84_IRQHandler</a>
 <LI><a href="#[51]">Reserved85_IRQHandler</a>
 <LI><a href="#[52]">Reserved86_IRQHandler</a>
 <LI><a href="#[57]">Reserved91_IRQHandler</a>
 <LI><a href="#[58]">Reserved92_IRQHandler</a>
 <LI><a href="#[59]">Reserved93_IRQHandler</a>
 <LI><a href="#[5a]">Reserved94_IRQHandler</a>
 <LI><a href="#[5b]">Reserved95_IRQHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[146]">rt_assert_handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11f]">rt_kprintf</a><BR>
 <LI><a href="#[179]">rt_backtrace_frame</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11f]">rt_kprintf</a><BR>
 <LI><a href="#[15a]">rt_thread_suspend_to_list</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[158]">rt_object_get_type</a><BR>
 <LI><a href="#[1f5]">rt_sched_remove_thread</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[146]">rt_assert_handler</a><BR>
 <LI><a href="#[162]">rt_schedule</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[146]">rt_assert_handler</a><BR>
 <LI><a href="#[1fd]">rt_scheduler_stack_check</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[146]">rt_assert_handler</a><BR>
 <LI><a href="#[171]">rt_sched_insert_thread</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[146]">rt_assert_handler</a><BR>
 <LI><a href="#[1f8]">rt_timer_stop</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[158]">rt_object_get_type</a><BR>
 <LI><a href="#[205]">rt_susp_list_enqueue</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[146]">rt_assert_handler</a><BR>
 <LI><a href="#[161]">rt_timer_start</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[158]">rt_object_get_type</a><BR>
 <LI><a href="#[160]">rt_timer_control</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[158]">rt_object_get_type</a><BR>
 <LI><a href="#[155]">_rt_mutex_take</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[158]">rt_object_get_type</a><BR>
 <LI><a href="#[15d]">_thread_update_priority</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[158]">rt_object_get_type</a><BR>
 <LI><a href="#[173]">rt_sched_thread_change_priority</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[146]">rt_assert_handler</a><BR>
 <LI><a href="#[16b]">rt_mutex_release</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[158]">rt_object_get_type</a><BR>
 <LI><a href="#[221]">ulog_voutput</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[146]">rt_assert_handler</a><BR>
 <LI><a href="#[1ef]">rt_kputs</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e0]">rt_device_write</a><BR>
 <LI><a href="#[220]">ulog_hex_formater</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[146]">rt_assert_handler</a><BR>
 <LI><a href="#[21f]">ulog_tail_formater</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[146]">rt_assert_handler</a><BR>
 <LI><a href="#[21e]">ulog_head_formater</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[146]">rt_assert_handler</a><BR>
 <LI><a href="#[21d]">ulog_formater</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[146]">rt_assert_handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[9c]">ADC0_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[4a]">ADC0_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[5]">BusFault_Handler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[84]">CDOG0_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[32]">CDOG0_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[5f]">CMC_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[d]">CMC_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[9e]">CMP0_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[4c]">CMP0_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[9f]">CMP1_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[4d]">CMP1_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[85]">CTIMER0_DriverIRQHandler</a> from fsl_ctimer.o(.text.CTIMER0_DriverIRQHandler) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[33]">CTIMER0_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[86]">CTIMER1_DriverIRQHandler</a> from fsl_ctimer.o(.text.CTIMER1_DriverIRQHandler) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[34]">CTIMER1_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[87]">CTIMER2_DriverIRQHandler</a> from fsl_ctimer.o(.text.CTIMER2_DriverIRQHandler) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[35]">CTIMER2_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[60]">DMA_CH0_DriverIRQHandler</a> from fsl_edma_soc.o(.text.DMA_CH0_DriverIRQHandler) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[e]">DMA_CH0_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[61]">DMA_CH1_DriverIRQHandler</a> from fsl_edma_soc.o(.text.DMA_CH1_DriverIRQHandler) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[f]">DMA_CH1_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[62]">DMA_CH2_DriverIRQHandler</a> from fsl_edma_soc.o(.text.DMA_CH2_DriverIRQHandler) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[10]">DMA_CH2_IRQHandler</a> from app_adc_dma.o(.text.DMA_CH2_IRQHandler) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[63]">DMA_CH3_DriverIRQHandler</a> from fsl_edma_soc.o(.text.DMA_CH3_DriverIRQHandler) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[11]">DMA_CH3_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[9]">DebugMon_Handler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[0]">DefaultISR</a> from startup_mcxa153.o(.text) referenced 6 times from fsl_lpuart.o(.data.s_lpuartIsr)
 <LI><a href="#[0]">DefaultISR</a> from startup_mcxa153.o(.text) referenced 2 times from fsl_ostimer.o(.data.s_ostimerIsr)
 <LI><a href="#[0]">DefaultISR</a> from startup_mcxa153.o(.text) referenced 2 times from fsl_utick.o(.data.s_utickIsr)
 <LI><a href="#[69]">ERM0_MULTI_BIT_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[17]">ERM0_MULTI_BIT_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[68]">ERM0_SINGLE_BIT_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[16]">ERM0_SINGLE_BIT_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[8b]">FLEXPWM0_FAULT_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[39]">FLEXPWM0_FAULT_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[8a]">FLEXPWM0_RELOAD_ERROR_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[38]">FLEXPWM0_RELOAD_ERROR_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[8c]">FLEXPWM0_SUBMODULE0_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[3a]">FLEXPWM0_SUBMODULE0_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[8d]">FLEXPWM0_SUBMODULE1_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[3b]">FLEXPWM0_SUBMODULE1_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[8e]">FLEXPWM0_SUBMODULE2_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[3c]">FLEXPWM0_SUBMODULE2_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[6a]">FMU0_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[18]">FMU0_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[94]">FREQME0_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[42]">FREQME0_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[6b]">GLIKEY0_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[19]">GLIKEY0_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[a5]">GPIO0_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[53]">GPIO0_IRQHandler</a> from drv_pin.o(.text.GPIO0_IRQHandler) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[a6]">GPIO1_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[54]">GPIO1_IRQHandler</a> from drv_pin.o(.text.GPIO1_IRQHandler) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[a7]">GPIO2_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[55]">GPIO2_IRQHandler</a> from drv_pin.o(.text.GPIO2_IRQHandler) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[a8]">GPIO3_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[56]">GPIO3_IRQHandler</a> from drv_pin.o(.text.GPIO3_IRQHandler) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[3]">HardFault_Handler</a> from context_rvds.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[3]">HardFault_Handler</a> from context_rvds.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[76]">I3C0_DriverIRQHandler</a> from fsl_i3c.o(.text.I3C0_DriverIRQHandler) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[24]">I3C0_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[78]">LPI2C0_DriverIRQHandler</a> from fsl_lpi2c.o(.text.LPI2C0_DriverIRQHandler) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[26]">LPI2C0_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[7a]">LPSPI0_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[28]">LPSPI0_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[7b]">LPSPI1_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[29]">LPSPI1_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[95]">LPTMR0_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[43]">LPTMR0_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[7d]">LPUART0_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART0_DriverIRQHandler) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[2b]">LPUART0_IRQHandler</a> from drv_uart.o(.text.LPUART0_IRQHandler) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[7e]">LPUART1_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART1_DriverIRQHandler) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[2c]">LPUART1_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[7f]">LPUART2_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART2_DriverIRQHandler) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[2d]">LPUART2_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[6c]">MBC0_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[1a]">MBC0_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[4]">MemManage_Handler</a> from board.o(.text.MemManage_Handler) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[2]">NMI_Handler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[2]">NMI_Handler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[97]">OS_EVENT_DriverIRQHandler</a> from fsl_ostimer.o(.text.OS_EVENT_DriverIRQHandler) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[45]">OS_EVENT_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[a]">PendSV_Handler</a> from context_rvds.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[a]">PendSV_Handler</a> from context_rvds.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[90]">QDC0_COMPARE_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[3e]">QDC0_COMPARE_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[91]">QDC0_HOME_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[3f]">QDC0_HOME_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[93]">QDC0_INDEX_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[41]">QDC0_INDEX_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[92]">QDC0_WATCHDOG_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[40]">QDC0_WATCHDOG_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[5e]">Reserved16_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[c]">Reserved16_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[64]">Reserved22_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[12]">Reserved22_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[65]">Reserved23_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[13]">Reserved23_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[66]">Reserved24_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[14]">Reserved24_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[67]">Reserved25_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[15]">Reserved25_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[6f]">Reserved33_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[1d]">Reserved33_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[71]">Reserved35_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[1f]">Reserved35_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[72]">Reserved36_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[20]">Reserved36_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[73]">Reserved37_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[21]">Reserved37_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[74]">Reserved38_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[22]">Reserved38_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[75]">Reserved39_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[23]">Reserved39_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[77]">Reserved41_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[25]">Reserved41_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[79]">Reserved43_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[27]">Reserved43_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[7c]">Reserved46_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[2a]">Reserved46_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[80]">Reserved50_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[2e]">Reserved50_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[81]">Reserved51_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[2f]">Reserved51_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[83]">Reserved53_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[31]">Reserved53_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[88]">Reserved58_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[36]">Reserved58_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[89]">Reserved59_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[37]">Reserved59_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[8f]">Reserved65_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[3d]">Reserved65_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[96]">Reserved72_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[44]">Reserved72_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[9b]">Reserved77_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[49]">Reserved77_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[9d]">Reserved79_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[4b]">Reserved79_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[a0]">Reserved82_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[4e]">Reserved82_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[a1]">Reserved83_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[4f]">Reserved83_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[a2]">Reserved84_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[50]">Reserved84_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[a3]">Reserved85_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[51]">Reserved85_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[a4]">Reserved86_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[52]">Reserved86_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[a9]">Reserved91_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[57]">Reserved91_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[aa]">Reserved92_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[58]">Reserved92_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[ab]">Reserved93_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[59]">Reserved93_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[ac]">Reserved94_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[5a]">Reserved94_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[ad]">Reserved95_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[5b]">Reserved95_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[1]">Reset_Handler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[6d]">SCG0_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[1b]">SCG0_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[6e]">SPC0_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[1c]">SPC0_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[8]">SVC_Handler</a> from syscall_rvds.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[8]">SVC_Handler</a> from syscall_rvds.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[7]">SecureFault_Handler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[b]">SysTick_Handler</a> from board.o(.text.SysTick_Handler) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[b]">SysTick_Handler</a> from board.o(.text.SysTick_Handler) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[5c]">SystemInit</a> from system_mcxa153.o(.text.SystemInit) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[82]">USB0_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[30]">USB0_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[99]">UTICK0_DriverIRQHandler</a> from fsl_utick.o(.text.UTICK0_DriverIRQHandler) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[47]">UTICK0_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[6]">UsageFault_Handler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[98]">WAKETIMER0_DriverIRQHandler</a> from fsl_waketimer.o(.text.WAKETIMER0_DriverIRQHandler) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[46]">WAKETIMER0_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[70]">WUU0_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[1e]">WUU0_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[9a]">WWDT0_DriverIRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[48]">WWDT0_IRQHandler</a> from startup_mcxa153.o(.text) referenced from startup_mcxa153.o(.isr_vector)
 <LI><a href="#[5d]">__main</a> from __main.o(!!!main) referenced from startup_mcxa153.o(.text)
 <LI><a href="#[ae]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[d3]">_pin_cmd</a> from dev_pin.o(.text._pin_cmd) referenced from dev_pin.o(FSymTab)
 <LI><a href="#[b3]">_pin_control</a> from dev_pin.o(.text._pin_control) referenced 2 times from dev_pin.o(.text.rt_device_pin_register)
 <LI><a href="#[b1]">_pin_read</a> from dev_pin.o(.text._pin_read) referenced 2 times from dev_pin.o(.text.rt_device_pin_register)
 <LI><a href="#[b2]">_pin_write</a> from dev_pin.o(.text._pin_write) referenced 2 times from dev_pin.o(.text.rt_device_pin_register)
 <LI><a href="#[c1]">_thread_exit</a> from thread.o(.text._thread_exit) referenced 2 times from thread.o(.text.rt_thread_create)
 <LI><a href="#[c1]">_thread_exit</a> from thread.o(.text._thread_exit) referenced 2 times from thread.o(.text.rt_thread_init)
 <LI><a href="#[c2]">_thread_timeout</a> from thread.o(.text._thread_timeout) referenced 2 times from thread.o(.text.rt_thread_create)
 <LI><a href="#[c2]">_thread_timeout</a> from thread.o(.text._thread_timeout) referenced 2 times from thread.o(.text.rt_thread_init)
 <LI><a href="#[c0]">_timer_thread_entry</a> from timer.o(.text._timer_thread_entry) referenced 2 times from timer.o(.text.rt_system_timer_thread_init)
 <LI><a href="#[d7]">clear</a> from cmd.o(.text.clear) referenced from cmd.o(FSymTab)
 <LI><a href="#[da]">cmd_backtrace</a> from kservice.o(.text.cmd_backtrace) referenced from kservice.o(FSymTab)
 <LI><a href="#[d6]">cmd_free</a> from msh.o(.text.cmd_free) referenced from msh.o(FSymTab)
 <LI><a href="#[d9]">cmd_list</a> from cmd.o(.text.cmd_list) referenced from cmd.o(FSymTab)
 <LI><a href="#[d5]">cmd_ps</a> from msh.o(.text.cmd_ps) referenced from msh.o(FSymTab)
 <LI><a href="#[af]">finsh_rx_ind</a> from shell.o(.text.finsh_rx_ind) referenced 2 times from shell.o(.text.finsh_set_device)
 <LI><a href="#[d1]">finsh_system_init</a> from shell.o(.text.finsh_system_init) referenced from shell.o(.rti_fn.6)
 <LI><a href="#[b0]">finsh_thread_entry</a> from shell.o(.text.finsh_thread_entry) referenced 2 times from shell.o(.text.finsh_system_init)
 <LI><a href="#[c3]">idle_thread_entry</a> from idle.o(.text.idle_thread_entry) referenced 2 times from idle.o(.text.rt_thread_idle_init)
 <LI><a href="#[c4]">main_thread_entry</a> from components.o(.text.main_thread_entry) referenced 2 times from components.o(.text.rtthread_startup)
 <LI><a href="#[c6]">mcx_configure</a> from drv_uart.o(.text.mcx_configure) referenced from drv_uart.o(.rodata.mcx_uart_ops)
 <LI><a href="#[c7]">mcx_control</a> from drv_uart.o(.text.mcx_control) referenced from drv_uart.o(.rodata.mcx_uart_ops)
 <LI><a href="#[c9]">mcx_getc</a> from drv_uart.o(.text.mcx_getc) referenced from drv_uart.o(.rodata.mcx_uart_ops)
 <LI><a href="#[b7]">mcx_pin_attach_irq</a> from drv_pin.o(.text.mcx_pin_attach_irq) referenced 2 times from drv_pin.o(.text.rt_hw_pin_init)
 <LI><a href="#[b8]">mcx_pin_detach_irq</a> from drv_pin.o(.text.mcx_pin_detach_irq) referenced 2 times from drv_pin.o(.text.rt_hw_pin_init)
 <LI><a href="#[b9]">mcx_pin_irq_enable</a> from drv_pin.o(.text.mcx_pin_irq_enable) referenced 2 times from drv_pin.o(.text.rt_hw_pin_init)
 <LI><a href="#[b4]">mcx_pin_mode</a> from drv_pin.o(.text.mcx_pin_mode) referenced 2 times from drv_pin.o(.text.rt_hw_pin_init)
 <LI><a href="#[b6]">mcx_pin_read</a> from drv_pin.o(.text.mcx_pin_read) referenced 2 times from drv_pin.o(.text.rt_hw_pin_init)
 <LI><a href="#[b5]">mcx_pin_write</a> from drv_pin.o(.text.mcx_pin_write) referenced 2 times from drv_pin.o(.text.rt_hw_pin_init)
 <LI><a href="#[c8]">mcx_putc</a> from drv_uart.o(.text.mcx_putc) referenced from drv_uart.o(.rodata.mcx_uart_ops)
 <LI><a href="#[d4]">msh_help</a> from msh.o(.text.msh_help) referenced from msh.o(FSymTab)
 <LI><a href="#[cc]">rt_hw_pin_init</a> from drv_pin.o(.text.rt_hw_pin_init) referenced from drv_pin.o(.rti_fn.1)
 <LI><a href="#[cd]">rt_hw_uart_init</a> from drv_uart.o(.text.rt_hw_uart_init) referenced from drv_uart.o(.rti_fn.1)
 <LI><a href="#[bc]">rt_serial_close</a> from dev_serial.o(.text.rt_serial_close) referenced 2 times from dev_serial.o(.text.rt_hw_serial_register)
 <LI><a href="#[bf]">rt_serial_control</a> from dev_serial.o(.text.rt_serial_control) referenced 2 times from dev_serial.o(.text.rt_hw_serial_register)
 <LI><a href="#[ba]">rt_serial_init</a> from dev_serial.o(.text.rt_serial_init) referenced 2 times from dev_serial.o(.text.rt_hw_serial_register)
 <LI><a href="#[bb]">rt_serial_open</a> from dev_serial.o(.text.rt_serial_open) referenced 2 times from dev_serial.o(.text.rt_hw_serial_register)
 <LI><a href="#[bd]">rt_serial_read</a> from dev_serial.o(.text.rt_serial_read) referenced 2 times from dev_serial.o(.text.rt_hw_serial_register)
 <LI><a href="#[be]">rt_serial_write</a> from dev_serial.o(.text.rt_serial_write) referenced 2 times from dev_serial.o(.text.rt_hw_serial_register)
 <LI><a href="#[cf]">rti_board_end</a> from components.o(.text.rti_board_end) referenced from components.o(.rti_fn.1.end)
 <LI><a href="#[cb]">rti_board_start</a> from components.o(.text.rti_board_start) referenced from components.o(.rti_fn.0.end)
 <LI><a href="#[d2]">rti_end</a> from components.o(.text.rti_end) referenced from components.o(.rti_fn.6.end)
 <LI><a href="#[ca]">rti_start</a> from components.o(.text.rti_start) referenced from components.o(.rti_fn.0)
 <LI><a href="#[d0]">ulog_console_backend_init</a> from console_be.o(.text.ulog_console_backend_init) referenced from console_be.o(.rti_fn.2)
 <LI><a href="#[c5]">ulog_console_backend_output</a> from console_be.o(.text.ulog_console_backend_output) referenced 2 times from console_be.o(.text.ulog_console_backend_init)
 <LI><a href="#[ce]">ulog_init</a> from ulog.o(.text.ulog_init) referenced from ulog.o(.rti_fn.1)
 <LI><a href="#[d8]">version</a> from cmd.o(.text.version) referenced from cmd.o(FSymTab)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5d]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[db]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[dd]"></a>__scatterload_rt2</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[241]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[242]"></a>__scatterload_loop</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[243]"></a>__decompress</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[244]"></a>__decompress0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[245]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, __scatter.o(!!handler_null), UNUSED)

<P><STRONG><a name="[246]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[e2]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[247]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[248]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[de]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[249]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[24a]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[24b]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[24c]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[24d]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[e0]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[24e]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[24f]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[250]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[251]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[252]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[253]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[254]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[255]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[256]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[257]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[258]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[259]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[25a]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[25b]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[25c]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[e7]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[25d]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[25e]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[25f]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[260]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[261]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[262]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[263]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[dc]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[264]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[265]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry7.o(.ARM.Collect$$rtentry$$00000007))

<P><STRONG><a name="[e1]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[266]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[e3]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; rtthread_startup &rArr; rt_hw_board_init &rArr; BOARD_InitBootClocks &rArr; BOARD_BootClockFRO96M &rArr; SPC_SetSRAMOperateVoltage &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[267]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[106]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[e6]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[268]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[e8]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = __rt_exit_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[1e1]"></a>rt_hw_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_remove_thread
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_insert_thread
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical_safe
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1e2]"></a>rt_hw_interrupt_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_remove_thread
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_insert_thread
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock_n_resched
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical_safe
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[1ff]"></a>rt_hw_context_switch</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[1fe]"></a>rt_hw_context_switch_interrupt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_trustzone_context_store
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_trustzone_context_load
</UL>
<BR>[Address Reference Count : 2]<UL><LI> startup_mcxa153.o(.text)
<LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[208]"></a>rt_hw_context_switch_to</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[269]"></a>rt_hw_interrupt_thread_switch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, context_rvds.o(.text), UNUSED)

<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = HardFault_Handler &rArr; rt_hw_hard_fault_exception &rArr; list_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> startup_mcxa153.o(.text)
<LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[26a]"></a>tzcall</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, syscall_rvds.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, syscall_rvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = SVC_Handler &rArr; tzcall_entry &rArr; rt_secure_svc_handle &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscall_entry
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tzcall_entry
</UL>
<BR>[Address Reference Count : 2]<UL><LI> startup_mcxa153.o(.text)
<LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[9c]"></a>ADC0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[84]"></a>CDOG0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[5f]"></a>CMC_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[9e]"></a>CMP0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[9f]"></a>CMP1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[9]"></a>DebugMon_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[0]"></a>DefaultISR</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 3]<UL><LI> fsl_ostimer.o(.data.s_ostimerIsr)
<LI> fsl_utick.o(.data.s_utickIsr)
<LI> fsl_lpuart.o(.data.s_lpuartIsr)
</UL>
<P><STRONG><a name="[69]"></a>ERM0_MULTI_BIT_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[68]"></a>ERM0_SINGLE_BIT_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[8b]"></a>FLEXPWM0_FAULT_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[8a]"></a>FLEXPWM0_RELOAD_ERROR_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[8c]"></a>FLEXPWM0_SUBMODULE0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[8d]"></a>FLEXPWM0_SUBMODULE1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[8e]"></a>FLEXPWM0_SUBMODULE2_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[6a]"></a>FMU0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[94]"></a>FREQME0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[6b]"></a>GLIKEY0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[a5]"></a>GPIO0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[a6]"></a>GPIO1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[a7]"></a>GPIO2_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[a8]"></a>GPIO3_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[7a]"></a>LPSPI0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[7b]"></a>LPSPI1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[95]"></a>LPTMR0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[6c]"></a>MBC0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[90]"></a>QDC0_COMPARE_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[91]"></a>QDC0_HOME_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[93]"></a>QDC0_INDEX_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[92]"></a>QDC0_WATCHDOG_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[5e]"></a>Reserved16_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[64]"></a>Reserved22_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[65]"></a>Reserved23_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[66]"></a>Reserved24_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[67]"></a>Reserved25_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[6f]"></a>Reserved33_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[71]"></a>Reserved35_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[72]"></a>Reserved36_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[73]"></a>Reserved37_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[74]"></a>Reserved38_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[75]"></a>Reserved39_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[77]"></a>Reserved41_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[79]"></a>Reserved43_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[7c]"></a>Reserved46_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[80]"></a>Reserved50_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[81]"></a>Reserved51_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[83]"></a>Reserved53_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[88]"></a>Reserved58_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[89]"></a>Reserved59_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[8f]"></a>Reserved65_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[96]"></a>Reserved72_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[9b]"></a>Reserved77_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[9d]"></a>Reserved79_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[a0]"></a>Reserved82_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[a1]"></a>Reserved83_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[a2]"></a>Reserved84_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[a3]"></a>Reserved85_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[a4]"></a>Reserved86_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[a9]"></a>Reserved91_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[aa]"></a>Reserved92_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[ab]"></a>Reserved93_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[ac]"></a>Reserved94_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[ad]"></a>Reserved95_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[6d]"></a>SCG0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[6e]"></a>SPC0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[7]"></a>SecureFault_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[82]"></a>USB0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[70]"></a>WUU0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[9a]"></a>WWDT0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_mcxa153.o(.text)
<LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[c]"></a>Reserved16_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[d]"></a>CMC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[e]"></a>DMA_CH0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[f]"></a>DMA_CH1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[11]"></a>DMA_CH3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[12]"></a>Reserved22_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[13]"></a>Reserved23_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[14]"></a>Reserved24_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[15]"></a>Reserved25_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[16]"></a>ERM0_SINGLE_BIT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[17]"></a>ERM0_MULTI_BIT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[18]"></a>FMU0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[19]"></a>GLIKEY0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[1a]"></a>MBC0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[1b]"></a>SCG0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[1c]"></a>SPC0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[1d]"></a>Reserved33_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[1e]"></a>WUU0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[1f]"></a>Reserved35_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[20]"></a>Reserved36_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[21]"></a>Reserved37_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[22]"></a>Reserved38_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[23]"></a>Reserved39_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[24]"></a>I3C0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[25]"></a>Reserved41_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[26]"></a>LPI2C0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[27]"></a>Reserved43_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[28]"></a>LPSPI0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[29]"></a>LPSPI1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[2a]"></a>Reserved46_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[2c]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[2d]"></a>LPUART2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[2e]"></a>Reserved50_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[2f]"></a>Reserved51_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[30]"></a>USB0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[31]"></a>Reserved53_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[32]"></a>CDOG0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[33]"></a>CTIMER0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[34]"></a>CTIMER1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[35]"></a>CTIMER2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[36]"></a>Reserved58_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[37]"></a>Reserved59_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[38]"></a>FLEXPWM0_RELOAD_ERROR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[39]"></a>FLEXPWM0_FAULT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[3a]"></a>FLEXPWM0_SUBMODULE0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[3b]"></a>FLEXPWM0_SUBMODULE1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[3c]"></a>FLEXPWM0_SUBMODULE2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[3d]"></a>Reserved65_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[3e]"></a>QDC0_COMPARE_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[3f]"></a>QDC0_HOME_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[40]"></a>QDC0_WATCHDOG_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[41]"></a>QDC0_INDEX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[42]"></a>FREQME0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[43]"></a>LPTMR0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[44]"></a>Reserved72_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[45]"></a>OS_EVENT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[46]"></a>WAKETIMER0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[47]"></a>UTICK0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[48]"></a>WWDT0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[49]"></a>Reserved77_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[4a]"></a>ADC0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[4b]"></a>Reserved79_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[4c]"></a>CMP0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[4d]"></a>CMP1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[4e]"></a>Reserved82_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[4f]"></a>Reserved83_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[50]"></a>Reserved84_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[51]"></a>Reserved85_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[52]"></a>Reserved86_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[57]"></a>Reserved91_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[58]"></a>Reserved92_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[59]"></a>Reserved93_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[5a]"></a>Reserved94_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[5b]"></a>Reserved95_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mcxa153.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[26b]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_isint
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[f2]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_integer
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[26c]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[1ba]"></a>__aeabi_ldivmod</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_broken_up_decimal
</UL>

<P><STRONG><a name="[f1]"></a>_ll_sdiv</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[f3]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd
</UL>

<P><STRONG><a name="[f6]"></a>strtoul</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_backtrace
</UL>

<P><STRONG><a name="[f8]"></a>__aeabi_assert</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, assert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPC_SetSRAMOperateVoltage
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPC_SetActiveModeCoreLDORegulatorConfig
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_Init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GetDefaultConfig
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_SetPeripheralReset
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_InitChannel
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_SetTransferConfig
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_PrepareTransfer
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetDefaultConfig
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPADC_SetConvTriggerConfig
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPADC_GetDefaultConvTriggerConfig
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPADC_SetConvCommandConfig
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPADC_GetDefaultConvCommandConfig
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPADC_DoAutoCalibration
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPADC_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTMR_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTMR_GetDefaultConfig
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetClockDiv
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_AttachClk
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INPUTMUX_Init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_ClearChannelStatusFlags
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_PrepareTransferConfig
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_ConfigChannelSoftwareTCDExt
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
</UL>

<P><STRONG><a name="[26d]"></a>__assert</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, assert.o(.text), UNUSED)

<P><STRONG><a name="[1b7]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_auto_complete
</UL>

<P><STRONG><a name="[195]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[19b]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_auto_complete
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>

<P><STRONG><a name="[1b4]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_auto_complete
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>

<P><STRONG><a name="[132]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CH2_IRQHandler
</UL>

<P><STRONG><a name="[26e]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[26f]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[270]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_broken_up_decimal
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_integer
</UL>

<P><STRONG><a name="[fd]"></a>__aeabi_memset4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memset4 &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_floating_point
</UL>

<P><STRONG><a name="[271]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_memset4.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[272]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>_memset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[10a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPADC_GetDefaultConvCommandConfig
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Timer_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_PrepareTransferConfig
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPADC_FinishAutoCalibration
</UL>

<P><STRONG><a name="[273]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[274]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>

<P><STRONG><a name="[ff]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_auto_complete
</UL>

<P><STRONG><a name="[1b6]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_opt_id_get
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[275]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[276]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[f4]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[277]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[278]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[f5]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[fa]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 936 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[f9]"></a>__assert_puts</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, assert_puts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = __assert_puts &rArr; _ttywrch &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[101]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[102]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[e5]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[105]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[104]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[107]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = __default_signal_display &rArr; _ttywrch &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[e4]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, components.o(.text.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = main &rArr; rtthread_startup &rArr; rt_hw_board_init &rArr; BOARD_InitBootClocks &rArr; BOARD_BootClockFRO96M &rArr; SPC_SetSRAMOperateVoltage &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[109]"></a>ADC_DMA_Timer_Init</STRONG> (Thumb, 376 bytes, Stack size 152 bytes, app_adc_dma.o(.text.ADC_DMA_Timer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192 + Unknown Stack Size
<LI>Call Chain = ADC_DMA_Timer_Init &rArr; EDMA_PrepareTransfer &rArr; EDMA_PrepareTransferConfig &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_InitChannel
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_SetTransferConfig
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_PrepareTransfer
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetDefaultConfig
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPADC_SetConvTriggerConfig
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPADC_GetDefaultConvTriggerConfig
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPADC_SetConvCommandConfig
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPADC_GetDefaultConvCommandConfig
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPADC_DoAutoCalibration
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPADC_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPADC_GetDefaultConfig
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTMR_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTMR_GetDefaultConfig
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetClockDiv
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_AttachClk
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INPUTMUX_Deinit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INPUTMUX_AttachSignal
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INPUTMUX_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1ad]"></a>ADC_DMA_Timer_IsComplete</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_adc_dma.o(.text.ADC_DMA_Timer_IsComplete))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[11e]"></a>ADC_DMA_Timer_PrintResults</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, app_adc_dma.o(.text.ADC_DMA_Timer_PrintResults))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = ADC_DMA_Timer_PrintResults &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1ab]"></a>ADC_DMA_Timer_SetSampleRate</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, app_adc_dma.o(.text.ADC_DMA_Timer_SetSampleRate))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[120]"></a>ADC_DMA_Timer_StartTransfer</STRONG> (Thumb, 248 bytes, Stack size 144 bytes, app_adc_dma.o(.text.ADC_DMA_Timer_StartTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184 + Unknown Stack Size
<LI>Call Chain = ADC_DMA_Timer_StartTransfer &rArr; EDMA_PrepareTransfer &rArr; EDMA_PrepareTransferConfig &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetLptmrClkFreq
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_InitChannel
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_SetTransferConfig
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_PrepareTransfer
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetDefaultConfig
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[122]"></a>BOARD_BootClockFRO96M</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, clock_config.o(.text.BOARD_BootClockFRO96M))
<BR><BR>[Stack]<UL><LI>Max Depth = 984 + Unknown Stack Size
<LI>Call Chain = BOARD_BootClockFRO96M &rArr; SPC_SetSRAMOperateVoltage &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetupFRO12MClocking
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetupFROHFClocking
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPC_SetSRAMOperateVoltage
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPC_SetActiveModeCoreLDORegulatorConfig
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetClockDiv
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_AttachClk
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitBootClocks
</UL>

<P><STRONG><a name="[128]"></a>BOARD_InitBootClocks</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, clock_config.o(.text.BOARD_InitBootClocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 984 + Unknown Stack Size
<LI>Call Chain = BOARD_InitBootClocks &rArr; BOARD_BootClockFRO96M &rArr; SPC_SetSRAMOperateVoltage &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockFRO96M
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[1e6]"></a>BOARD_InitBootPins</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pin_mux.o(.text.BOARD_InitBootPins))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[129]"></a>BOARD_InitPins</STRONG> (Thumb, 388 bytes, Stack size 8 bytes, pin_mux.o(.text.BOARD_InitPins), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_SetPeripheralReset
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetClockDiv
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_AttachClk
</UL>

<P><STRONG><a name="[10e]"></a>CLOCK_AttachClk</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_AttachClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = CLOCK_AttachClk &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcx_configure
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockFRO96M
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Timer_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Init
</UL>

<P><STRONG><a name="[123]"></a>CLOCK_GetCoreSysClkFreq</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_GetCoreSysClkFreq))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockFRO96M
</UL>

<P><STRONG><a name="[12b]"></a>CLOCK_GetFreq</STRONG> (Thumb, 400 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_GetFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcx_configure
</UL>

<P><STRONG><a name="[121]"></a>CLOCK_GetLptmrClkFreq</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_GetLptmrClkFreq))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Timer_StartTransfer
</UL>

<P><STRONG><a name="[10f]"></a>CLOCK_SetClockDiv</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_SetClockDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = CLOCK_SetClockDiv &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcx_configure
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockFRO96M
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Timer_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Init
</UL>

<P><STRONG><a name="[127]"></a>CLOCK_SetupFRO12MClocking</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_SetupFRO12MClocking))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockFRO96M
</UL>

<P><STRONG><a name="[126]"></a>CLOCK_SetupFROHFClocking</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_SetupFROHFClocking))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockFRO96M
</UL>

<P><STRONG><a name="[85]"></a>CTIMER0_DriverIRQHandler</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, fsl_ctimer.o(.text.CTIMER0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CTIMER0_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[86]"></a>CTIMER1_DriverIRQHandler</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, fsl_ctimer.o(.text.CTIMER1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CTIMER1_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[87]"></a>CTIMER2_DriverIRQHandler</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, fsl_ctimer.o(.text.CTIMER2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CTIMER2_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[12c]"></a>CTIMER_GetDefaultConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fsl_ctimer.o(.text.CTIMER_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = CTIMER_GetDefaultConfig &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Init
</UL>

<P><STRONG><a name="[12d]"></a>CTIMER_Init</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, fsl_ctimer.o(.text.CTIMER_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + Unknown Stack Size
<LI>Call Chain = CTIMER_Init &rArr; RESET_PeripheralReset &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Init
</UL>

<P><STRONG><a name="[60]"></a>DMA_CH0_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_edma_soc.o(.text.DMA_CH0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = DMA_CH0_DriverIRQHandler &rArr; EDMA_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[61]"></a>DMA_CH1_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_edma_soc.o(.text.DMA_CH1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = DMA_CH1_DriverIRQHandler &rArr; EDMA_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[62]"></a>DMA_CH2_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_edma_soc.o(.text.DMA_CH2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = DMA_CH2_DriverIRQHandler &rArr; EDMA_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[10]"></a>DMA_CH2_IRQHandler</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, app_adc_dma.o(.text.DMA_CH2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = DMA_CH2_IRQHandler &rArr; EDMA_ClearChannelStatusFlags &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_ClearChannelStatusFlags
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetChannelStatusFlags
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[63]"></a>DMA_CH3_DriverIRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_edma_soc.o(.text.DMA_CH3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = DMA_CH3_DriverIRQHandler &rArr; EDMA_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[131]"></a>EDMA_ClearChannelStatusFlags</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, fsl_edma.o(.text.EDMA_ClearChannelStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = EDMA_ClearChannelStatusFlags &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CH2_IRQHandler
</UL>

<P><STRONG><a name="[133]"></a>EDMA_ConfigChannelSoftwareTCDExt</STRONG> (Thumb, 636 bytes, Stack size 8 bytes, fsl_edma.o(.text.EDMA_ConfigChannelSoftwareTCDExt))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = EDMA_ConfigChannelSoftwareTCDExt &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_SetTransferConfig
</UL>

<P><STRONG><a name="[12f]"></a>EDMA_DriverIRQHandler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fsl_edma.o(.text.EDMA_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = EDMA_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CH3_DriverIRQHandler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CH2_DriverIRQHandler
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CH1_DriverIRQHandler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CH0_DriverIRQHandler
</UL>

<P><STRONG><a name="[130]"></a>EDMA_GetChannelStatusFlags</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, fsl_edma.o(.text.EDMA_GetChannelStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = EDMA_GetChannelStatusFlags &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CH2_IRQHandler
</UL>

<P><STRONG><a name="[119]"></a>EDMA_GetDefaultConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, fsl_edma.o(.text.EDMA_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = EDMA_GetDefaultConfig &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Timer_StartTransfer
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Timer_Init
</UL>

<P><STRONG><a name="[134]"></a>EDMA_HandleIRQ</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, fsl_edma.o(.text.EDMA_HandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DriverIRQHandler
</UL>

<P><STRONG><a name="[11a]"></a>EDMA_Init</STRONG> (Thumb, 292 bytes, Stack size 16 bytes, fsl_edma.o(.text.EDMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = EDMA_Init &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_SetPeripheralReset
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Timer_StartTransfer
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Timer_Init
</UL>

<P><STRONG><a name="[11d]"></a>EDMA_InitChannel</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, fsl_edma.o(.text.EDMA_InitChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = EDMA_InitChannel &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Timer_StartTransfer
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Timer_Init
</UL>

<P><STRONG><a name="[11b]"></a>EDMA_PrepareTransfer</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, fsl_edma.o(.text.EDMA_PrepareTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040 + Unknown Stack Size
<LI>Call Chain = EDMA_PrepareTransfer &rArr; EDMA_PrepareTransferConfig &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_PrepareTransferConfig
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Timer_StartTransfer
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Timer_Init
</UL>

<P><STRONG><a name="[135]"></a>EDMA_PrepareTransferConfig</STRONG> (Thumb, 736 bytes, Stack size 40 bytes, fsl_edma.o(.text.EDMA_PrepareTransferConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 992 + Unknown Stack Size
<LI>Call Chain = EDMA_PrepareTransferConfig &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_PrepareTransfer
</UL>

<P><STRONG><a name="[11c]"></a>EDMA_SetTransferConfig</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, fsl_edma.o(.text.EDMA_SetTransferConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + Unknown Stack Size
<LI>Call Chain = EDMA_SetTransferConfig &rArr; EDMA_ConfigChannelSoftwareTCDExt &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_ConfigChannelSoftwareTCDExt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Timer_StartTransfer
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Timer_Init
</UL>

<P><STRONG><a name="[53]"></a>GPIO0_IRQHandler</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, drv_pin.o(.text.GPIO0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO0_IRQHandler &rArr; rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GpioClearInterruptFlags
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GpioGetInterruptFlags
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[54]"></a>GPIO1_IRQHandler</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, drv_pin.o(.text.GPIO1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO1_IRQHandler &rArr; rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GpioClearInterruptFlags
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GpioGetInterruptFlags
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[55]"></a>GPIO2_IRQHandler</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, drv_pin.o(.text.GPIO2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO2_IRQHandler &rArr; rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GpioClearInterruptFlags
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GpioGetInterruptFlags
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[56]"></a>GPIO3_IRQHandler</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, drv_pin.o(.text.GPIO3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO3_IRQHandler &rArr; rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GpioClearInterruptFlags
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GpioGetInterruptFlags
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[138]"></a>GPIO_GpioClearInterruptFlags</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_gpio.o(.text.GPIO_GpioClearInterruptFlags))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_IRQHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_IRQHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_IRQHandler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_IRQHandler
</UL>

<P><STRONG><a name="[137]"></a>GPIO_GpioGetInterruptFlags</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_gpio.o(.text.GPIO_GpioGetInterruptFlags))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_IRQHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_IRQHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_IRQHandler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_IRQHandler
</UL>

<P><STRONG><a name="[13a]"></a>GPIO_PinInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, fsl_gpio.o(.text.GPIO_PinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = GPIO_PinInit &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcx_pin_mode
</UL>

<P><STRONG><a name="[76]"></a>I3C0_DriverIRQHandler</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, fsl_i3c.o(.text.I3C0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I3C0_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[10c]"></a>INPUTMUX_AttachSignal</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fsl_inputmux.o(.text.INPUTMUX_AttachSignal))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Timer_Init
</UL>

<P><STRONG><a name="[10d]"></a>INPUTMUX_Deinit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fsl_inputmux.o(.text.INPUTMUX_Deinit))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Timer_Init
</UL>

<P><STRONG><a name="[10b]"></a>INPUTMUX_Init</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, fsl_inputmux.o(.text.INPUTMUX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = INPUTMUX_Init &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_SetPeripheralReset
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Timer_Init
</UL>

<P><STRONG><a name="[114]"></a>LPADC_DoAutoCalibration</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, fsl_lpadc.o(.text.LPADC_DoAutoCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = LPADC_DoAutoCalibration &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPADC_FinishAutoCalibration
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Timer_Init
</UL>

<P><STRONG><a name="[13b]"></a>LPADC_FinishAutoCalibration</STRONG> (Thumb, 194 bytes, Stack size 104 bytes, fsl_lpadc.o(.text.LPADC_FinishAutoCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = LPADC_FinishAutoCalibration &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPADC_DoAutoCalibration
</UL>

<P><STRONG><a name="[112]"></a>LPADC_GetDefaultConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fsl_lpadc.o(.text.LPADC_GetDefaultConfig))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Timer_Init
</UL>

<P><STRONG><a name="[115]"></a>LPADC_GetDefaultConvCommandConfig</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_lpadc.o(.text.LPADC_GetDefaultConvCommandConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = LPADC_GetDefaultConvCommandConfig &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Timer_Init
</UL>

<P><STRONG><a name="[117]"></a>LPADC_GetDefaultConvTriggerConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fsl_lpadc.o(.text.LPADC_GetDefaultConvTriggerConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = LPADC_GetDefaultConvTriggerConfig &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Timer_Init
</UL>

<P><STRONG><a name="[113]"></a>LPADC_Init</STRONG> (Thumb, 314 bytes, Stack size 16 bytes, fsl_lpadc.o(.text.LPADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = LPADC_Init &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_SetPeripheralReset
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Timer_Init
</UL>

<P><STRONG><a name="[116]"></a>LPADC_SetConvCommandConfig</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, fsl_lpadc.o(.text.LPADC_SetConvCommandConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = LPADC_SetConvCommandConfig &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Timer_Init
</UL>

<P><STRONG><a name="[118]"></a>LPADC_SetConvTriggerConfig</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, fsl_lpadc.o(.text.LPADC_SetConvTriggerConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = LPADC_SetConvTriggerConfig &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Timer_Init
</UL>

<P><STRONG><a name="[78]"></a>LPI2C0_DriverIRQHandler</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, fsl_lpi2c.o(.text.LPI2C0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPI2C0_DriverIRQHandler &rArr; LPI2C_SlaveTransferHandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_SlaveTransferHandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[145]"></a>LPI2C_SlaveTransferHandleIRQ</STRONG> (Thumb, 380 bytes, Stack size 16 bytes, fsl_lpi2c.o(.text.LPI2C_SlaveTransferHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPI2C_SlaveTransferHandleIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C0_DriverIRQHandler
</UL>

<P><STRONG><a name="[110]"></a>LPTMR_GetDefaultConfig</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, fsl_lptmr.o(.text.LPTMR_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = LPTMR_GetDefaultConfig &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Timer_Init
</UL>

<P><STRONG><a name="[111]"></a>LPTMR_Init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, fsl_lptmr.o(.text.LPTMR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = LPTMR_Init &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Timer_Init
</UL>

<P><STRONG><a name="[7d]"></a>LPUART0_DriverIRQHandler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fsl_lpuart.o(.text.LPUART0_DriverIRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[2b]"></a>LPUART0_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, drv_uart.o(.text.LPUART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = LPUART0_IRQHandler &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[7e]"></a>LPUART1_DriverIRQHandler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fsl_lpuart.o(.text.LPUART1_DriverIRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[7f]"></a>LPUART2_DriverIRQHandler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fsl_lpuart.o(.text.LPUART2_DriverIRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[1b1]"></a>LPUART_DisableInterrupts</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART_DisableInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART_DisableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcx_control
</UL>

<P><STRONG><a name="[1b2]"></a>LPUART_EnableInterrupts</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, fsl_lpuart.o(.text.LPUART_EnableInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcx_control
</UL>

<P><STRONG><a name="[148]"></a>LPUART_GetDefaultConfig</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, fsl_lpuart.o(.text.LPUART_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = LPUART_GetDefaultConfig &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcx_configure
</UL>

<P><STRONG><a name="[1b3]"></a>LPUART_GetStatusFlags</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsl_lpuart.o(.text.LPUART_GetStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcx_getc
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcx_putc
</UL>

<P><STRONG><a name="[149]"></a>LPUART_Init</STRONG> (Thumb, 796 bytes, Stack size 40 bytes, fsl_lpuart.o(.text.LPUART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 992 + Unknown Stack Size
<LI>Call Chain = LPUART_Init &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_SetPeripheralReset
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcx_configure
</UL>

<P><STRONG><a name="[4]"></a>MemManage_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, board.o(.text.MemManage_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056 + Unknown Stack Size
<LI>Call Chain = MemManage_Handler &rArr; HardFault_Handler &rArr; rt_hw_hard_fault_exception &rArr; list_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[97]"></a>OS_EVENT_DriverIRQHandler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fsl_ostimer.o(.text.OS_EVENT_DriverIRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[12e]"></a>RESET_PeripheralReset</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, fsl_reset.o(.text.RESET_PeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = RESET_PeripheralReset &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_Init
</UL>

<P><STRONG><a name="[12a]"></a>RESET_SetPeripheralReset</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, fsl_reset.o(.text.RESET_SetPeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPADC_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INPUTMUX_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Init
</UL>

<P><STRONG><a name="[124]"></a>SPC_SetActiveModeCoreLDORegulatorConfig</STRONG> (Thumb, 204 bytes, Stack size 0 bytes, fsl_spc.o(.text.SPC_SetActiveModeCoreLDORegulatorConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = SPC_SetActiveModeCoreLDORegulatorConfig &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockFRO96M
</UL>

<P><STRONG><a name="[125]"></a>SPC_SetSRAMOperateVoltage</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, fsl_spc.o(.text.SPC_SetSRAMOperateVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = SPC_SetSRAMOperateVoltage &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockFRO96M
</UL>

<P><STRONG><a name="[b]"></a>SysTick_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, board.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; rt_tick_increase &rArr; rt_timer_check &rArr; rt_sem_release &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 2]<UL><LI> startup_mcxa153.o(.text)
<LI> startup_mcxa153.o(.isr_vector)
</UL>
<P><STRONG><a name="[5c]"></a>SystemInit</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, system_mcxa153.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[14b]"></a>SystemInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_mcxa153.o(.text.SystemInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[14c]"></a>TIMER_Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, app_timer.o(.text.TIMER_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 992 + Unknown Stack Size
<LI>Call Chain = TIMER_Init &rArr; CTIMER_Init &rArr; RESET_PeripheralReset &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_Init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GetDefaultConfig
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_SetPeripheralReset
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetClockDiv
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_AttachClk
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1ac]"></a>TIMER_Start</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, app_timer.o(.text.TIMER_Start))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[14d]"></a>TIMER_Stop</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, app_timer.o(.text.TIMER_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER_Stop &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[99]"></a>UTICK0_DriverIRQHandler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fsl_utick.o(.text.UTICK0_DriverIRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[98]"></a>WAKETIMER0_DriverIRQHandler</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fsl_waketimer.o(.text.WAKETIMER0_DriverIRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mcxa153.o(.text)
</UL>
<P><STRONG><a name="[1fc]"></a>__rt_ffs</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cpuport.o(.text.__rt_ffs))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[14e]"></a>__rt_libc_exit</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, cstdlib.o(.text.__rt_libc_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[e9]"></a>_sys_exit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, syscalls.o(.text._sys_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_libc_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[103]"></a>_ttywrch</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, syscalls.o(.text._ttywrch))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = _ttywrch &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
</UL>

<P><STRONG><a name="[186]"></a>finsh_getchar</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, shell.o(.text.finsh_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = finsh_getchar &rArr; rt_sem_take &rArr; _rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[189]"></a>finsh_set_device</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, shell.o(.text.finsh_set_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = finsh_set_device &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[d1]"></a>finsh_system_init</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, shell.o(.text.finsh_system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = finsh_system_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[182]"></a>list_device</STRONG> (Thumb, 244 bytes, Stack size 80 bytes, cmd.o(.text.list_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = list_device &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[183]"></a>list_event</STRONG> (Thumb, 292 bytes, Stack size 80 bytes, cmd.o(.text.list_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = list_event &rArr; rt_susp_list_print &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_print
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[184]"></a>list_mailbox</STRONG> (Thumb, 312 bytes, Stack size 80 bytes, cmd.o(.text.list_mailbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = list_mailbox &rArr; rt_susp_list_print &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_print
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[181]"></a>list_mempool</STRONG> (Thumb, 312 bytes, Stack size 88 bytes, cmd.o(.text.list_mempool))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = list_mempool &rArr; rt_susp_list_print &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_print
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[17f]"></a>list_msgqueue</STRONG> (Thumb, 304 bytes, Stack size 80 bytes, cmd.o(.text.list_msgqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = list_msgqueue &rArr; rt_susp_list_print &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_print
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[17e]"></a>list_mutex</STRONG> (Thumb, 380 bytes, Stack size 96 bytes, cmd.o(.text.list_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = list_mutex &rArr; rt_susp_list_print &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_print
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[180]"></a>list_sem</STRONG> (Thumb, 300 bytes, Stack size 80 bytes, cmd.o(.text.list_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = list_sem &rArr; rt_susp_list_print &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_print
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[17c]"></a>list_thread</STRONG> (Thumb, 440 bytes, Stack size 240 bytes, cmd.o(.text.list_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040 + Unknown Stack Size
<LI>Call Chain = list_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strerror
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ps
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>

<P><STRONG><a name="[185]"></a>list_timer</STRONG> (Thumb, 320 bytes, Stack size 80 bytes, cmd.o(.text.list_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = list_timer &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[1a9]"></a>$Super$$main</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192 + Unknown Stack Size
<LI>Call Chain = $Super$$main &rArr; ADC_DMA_Timer_Init &rArr; EDMA_PrepareTransfer &rArr; EDMA_PrepareTransferConfig &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Timer_PrintResults
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Stop
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Timer_IsComplete
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Timer_StartTransfer
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Start
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Timer_SetSampleRate
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Timer_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[198]"></a>msh_auto_complete</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, msh.o(.text.msh_auto_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = msh_auto_complete &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[17b]"></a>msh_cmd_opt_id_get</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, msh.o(.text.msh_cmd_opt_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = msh_cmd_opt_id_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[19a]"></a>msh_exec</STRONG> (Thumb, 496 bytes, Stack size 72 bytes, msh.o(.text.msh_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = msh_exec &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[154]"></a>msh_isint</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, msh_parse.o(.text.msh_isint))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = msh_isint &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd
</UL>

<P><STRONG><a name="[199]"></a>msh_opt_auto_complete</STRONG> (Thumb, 478 bytes, Stack size 40 bytes, msh.o(.text.msh_opt_auto_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = msh_opt_auto_complete &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[17d]"></a>msh_opt_list_dump</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, msh.o(.text.msh_opt_list_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = msh_opt_list_dump &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[146]"></a>rt_assert_handler</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, kservice.o(.text.rt_assert_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_backtrace
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_rx_ind
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART0_IRQHandler
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcx_control
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcx_configure
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_control
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_close
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_print_usage
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_control
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_write
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_read
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_deinit
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_resume_all_irq
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peek
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_dequeue
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait_flags
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wakeup_by_errno
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_close
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_scheduler_stack_check
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_reset_priority
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_remove_thread
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_insert_thread
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_init_priv
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_free
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_alloc
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_change_priority
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_enqueue
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_resume_all
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_update_priority
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_voutput
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_hex_formater
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_formater
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_tail_formater
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_head_formater
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_backend_register
</UL>

<P><STRONG><a name="[177]"></a>rt_backtrace</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, kservice.o(.text.rt_backtrace))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = rt_backtrace &rArr; rt_backtrace_frame &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_backtrace_frame
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_backtrace_frame_unwind
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init_generic
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_backtrace
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memory_info
</UL>

<P><STRONG><a name="[179]"></a>rt_backtrace_frame</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, kservice.o(.text.rt_backtrace_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = rt_backtrace_frame &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_backtrace_frame_unwind
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_backtrace
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_backtrace
</UL>

<P><STRONG><a name="[18f]"></a>rt_calloc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, kservice.o(.text.rt_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = rt_calloc &rArr; rt_malloc &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[1c5]"></a>rt_completion_done</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, completion_comm.o(.text.rt_completion_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = rt_completion_done &rArr; rt_completion_wakeup_by_errno &rArr; rt_thread_resume &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wakeup_by_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[1c7]"></a>rt_completion_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, completion_up.o(.text.rt_completion_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = rt_completion_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
</UL>

<P><STRONG><a name="[1c8]"></a>rt_completion_wait</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, completion_comm.o(.text.rt_completion_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = rt_completion_wait &rArr; rt_completion_wait_flags &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[1c9]"></a>rt_completion_wait_flags</STRONG> (Thumb, 440 bytes, Stack size 48 bytes, completion_up.o(.text.rt_completion_wait_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = rt_completion_wait_flags &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_with_flag
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_critical_level
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
</UL>

<P><STRONG><a name="[1c6]"></a>rt_completion_wakeup_by_errno</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, completion_up.o(.text.rt_completion_wakeup_by_errno))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = rt_completion_wakeup_by_errno &rArr; rt_thread_resume &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
</UL>

<P><STRONG><a name="[1e7]"></a>rt_components_board_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, components.o(.text.rt_components_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_components_board_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[193]"></a>rt_console_get_device</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, kservice.o(.text.rt_console_get_device))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[1cc]"></a>rt_console_set_device</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, kservice.o(.text.rt_console_set_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = rt_console_set_device &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[216]"></a>rt_cpu_index</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cpu_up.o(.text.rt_cpu_index))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
</UL>

<P><STRONG><a name="[16e]"></a>rt_cpu_self</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cpu_up.o(.text.rt_cpu_self))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_close
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[156]"></a>rt_critical_level</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scheduler_up.o(.text.rt_critical_level))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait_flags
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_close
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_voutput
</UL>

<P><STRONG><a name="[1cd]"></a>rt_data_queue_deinit</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, dataqueue.o(.text.rt_data_queue_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = rt_data_queue_deinit &rArr; rt_free &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_close
</UL>

<P><STRONG><a name="[1d0]"></a>rt_data_queue_init</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, dataqueue.o(.text.rt_data_queue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = rt_data_queue_init &rArr; rt_malloc &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
</UL>

<P><STRONG><a name="[1d2]"></a>rt_data_queue_peek</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, dataqueue.o(.text.rt_data_queue_peek))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = rt_data_queue_peek &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[1d3]"></a>rt_data_queue_pop</STRONG> (Thumb, 668 bytes, Stack size 48 bytes, dataqueue.o(.text.rt_data_queue_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = rt_data_queue_pop &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_dequeue
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_critical_level
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[1d5]"></a>rt_data_queue_push</STRONG> (Thumb, 480 bytes, Stack size 48 bytes, dataqueue.o(.text.rt_data_queue_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = rt_data_queue_push &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_dequeue
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_critical_level
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[1ce]"></a>rt_data_queue_reset</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, dataqueue.o(.text.rt_data_queue_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = rt_data_queue_reset &rArr; rt_susp_list_resume_all_irq &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_resume_all_irq
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_deinit
</UL>

<P><STRONG><a name="[1a5]"></a>rt_defunct_execute</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, defunct.o(.text.rt_defunct_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = rt_defunct_execute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_thread_entry
</UL>

<P><STRONG><a name="[18c]"></a>rt_device_close</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, device.o(.text.rt_device_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = rt_device_close &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
</UL>

<P><STRONG><a name="[18a]"></a>rt_device_find</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, device.o(.text.rt_device_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = rt_device_find &rArr; rt_object_find &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
</UL>

<P><STRONG><a name="[18b]"></a>rt_device_open</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, device.o(.text.rt_device_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = rt_device_open &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
</UL>

<P><STRONG><a name="[1dc]"></a>rt_device_pin_register</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, dev_pin.o(.text.rt_device_pin_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = rt_device_pin_register &rArr; rt_device_register &rArr; rt_object_find &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pin_init
</UL>

<P><STRONG><a name="[187]"></a>rt_device_read</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, device.o(.text.rt_device_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = rt_device_read &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
</UL>

<P><STRONG><a name="[1dd]"></a>rt_device_register</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, device.o(.text.rt_device_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = rt_device_register &rArr; rt_object_find &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pin_register
</UL>

<P><STRONG><a name="[18d]"></a>rt_device_set_rx_indicate</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, device.o(.text.rt_device_set_rx_indicate))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = rt_device_set_rx_indicate &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
</UL>

<P><STRONG><a name="[1e0]"></a>rt_device_write</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, device.o(.text.rt_device_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kputs
</UL>

<P><STRONG><a name="[168]"></a>rt_enter_critical</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, scheduler_up.o(.text.rt_enter_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_detach
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
</UL>

<P><STRONG><a name="[1d7]"></a>rt_exit_critical</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, scheduler_up.o(.text.rt_exit_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_exit_critical &rArr; rt_schedule &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
</UL>

<P><STRONG><a name="[16d]"></a>rt_exit_critical_safe</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, scheduler_up.o(.text.rt_exit_critical_safe))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_exit_critical_safe &rArr; rt_schedule &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_detach
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
</UL>

<P><STRONG><a name="[1cf]"></a>rt_free</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, kservice.o(.text.rt_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = rt_free &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_free
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_backtrace
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_close
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_deinit
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
</UL>

<P><STRONG><a name="[1ea]"></a>rt_hw_atomic_add</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, atomic_arm.o(.text.rt_hw_atomic_add))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>

<P><STRONG><a name="[1eb]"></a>rt_hw_atomic_load</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, atomic_arm.o(.text.rt_hw_atomic_load))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>

<P><STRONG><a name="[1ec]"></a>rt_hw_atomic_sub</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, atomic_arm.o(.text.rt_hw_atomic_sub))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
</UL>

<P><STRONG><a name="[178]"></a>rt_hw_backtrace_frame_get</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, kservice.o(.text.rt_hw_backtrace_frame_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = rt_hw_backtrace_frame_get &rArr; ulog_output &rArr; ulog_voutput &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_backtrace
</UL>

<P><STRONG><a name="[1c3]"></a>rt_hw_backtrace_frame_unwind</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, kservice.o(.text.rt_hw_backtrace_frame_unwind))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = rt_hw_backtrace_frame_unwind &rArr; ulog_output &rArr; ulog_voutput &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_backtrace_frame
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_backtrace
</UL>

<P><STRONG><a name="[1e5]"></a>rt_hw_board_init</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, board.o(.text.rt_hw_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024 + Unknown Stack Size
<LI>Call Chain = rt_hw_board_init &rArr; BOARD_InitBootClocks &rArr; BOARD_BootClockFRO96M &rArr; SPC_SetSRAMOperateVoltage &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_board_init
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_uart_init
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitBootPins
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitBootClocks
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_GetDefaultConfig
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1ee]"></a>rt_hw_console_output</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kservice.o(.text.rt_hw_console_output))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kputs
</UL>

<P><STRONG><a name="[ec]"></a>rt_hw_hard_fault_exception</STRONG> (Thumb, 796 bytes, Stack size 8 bytes, cpuport.o(.text.rt_hw_hard_fault_exception))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = rt_hw_hard_fault_exception &rArr; list_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[cc]"></a>rt_hw_pin_init</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, drv_pin.o(.text.rt_hw_pin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = rt_hw_pin_init &rArr; rt_device_pin_register &rArr; rt_device_register &rArr; rt_object_find &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pin_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pin.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[147]"></a>rt_hw_serial_isr</STRONG> (Thumb, 744 bytes, Stack size 48 bytes, dev_serial.o(.text.rt_hw_serial_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peek
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART0_IRQHandler
</UL>

<P><STRONG><a name="[1e9]"></a>rt_hw_serial_register</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, dev_serial.o(.text.rt_hw_serial_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = rt_hw_serial_register &rArr; rt_device_register &rArr; rt_object_find &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_uart_init
</UL>

<P><STRONG><a name="[212]"></a>rt_hw_stack_init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, cpuport.o(.text.rt_hw_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>

<P><STRONG><a name="[cd]"></a>rt_hw_uart_init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, drv_uart.o(.text.rt_hw_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = rt_hw_uart_init &rArr; rt_hw_serial_register &rArr; rt_device_register &rArr; rt_object_find &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[136]"></a>rt_interrupt_enter</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, irq.o(.text.rt_interrupt_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_atomic_add
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART0_IRQHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_IRQHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_IRQHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_IRQHandler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_IRQHandler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[157]"></a>rt_interrupt_get_nest</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, irq.o(.text.rt_interrupt_get_nest))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_atomic_load
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait_flags
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_voutput
</UL>

<P><STRONG><a name="[139]"></a>rt_interrupt_leave</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, irq.o(.text.rt_interrupt_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_atomic_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART0_IRQHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_IRQHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_IRQHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_IRQHandler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_IRQHandler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[11f]"></a>rt_kprintf</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, kservice.o(.text.rt_kprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_print_usage
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait_flags
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Timer_PrintResults
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Timer_StartTransfer
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_init
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init_generic
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_backtrace_frame
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_backtrace
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_print
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_list_dump
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memory_info
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_free
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_auto_complete
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_secure_svc_handle
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_voutput
</UL>

<P><STRONG><a name="[1ef]"></a>rt_kputs</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, kservice.o(.text.rt_kputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = rt_kputs &rArr;  rt_device_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_voutput
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_console_backend_output
</UL>

<P><STRONG><a name="[1c4]"></a>rt_malloc</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, kservice.o(.text.rt_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = rt_malloc &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_alloc
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_backtrace
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[196]"></a>rt_memcpy</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, kstring.o(.text.rt_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_control
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>

<P><STRONG><a name="[197]"></a>rt_memmove</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, kstring.o(.text.rt_memmove))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[17a]"></a>rt_memory_info</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, kservice.o(.text.rt_memory_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = rt_memory_info &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_backtrace
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_free
</UL>

<P><STRONG><a name="[18e]"></a>rt_memset</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, kstring.o(.text.rt_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_memset &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_init
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>

<P><STRONG><a name="[16a]"></a>rt_mutex_drop_thread</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, ipc.o(.text.rt_mutex_drop_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_get_init_prio
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_get_curr_prio
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_update_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_detach
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
</UL>

<P><STRONG><a name="[1f1]"></a>rt_mutex_init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ipc.o(.text.rt_mutex_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = rt_mutex_init &rArr; rt_object_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init_generic
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_init
</UL>

<P><STRONG><a name="[16b]"></a>rt_mutex_release</STRONG> (Thumb, 540 bytes, Stack size 40 bytes, ipc.o(.text.rt_mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + In Cycle
<LI>Call Chain = rt_mutex_release &rArr;  rt_object_get_type (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_is_suspended
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_change_priority
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_get_init_prio
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_get_curr_prio
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_ready
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_detach
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memory_info
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_voutput
</UL>

<P><STRONG><a name="[1e3]"></a>rt_mutex_take</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ipc.o(.text.rt_mutex_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = rt_mutex_take &rArr; _rt_mutex_take &rArr;  rt_object_get_type (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memory_info
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_voutput
</UL>

<P><STRONG><a name="[1f3]"></a>rt_object_allocate</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, object.o(.text.rt_object_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = rt_object_allocate &rArr; rt_malloc &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>

<P><STRONG><a name="[1da]"></a>rt_object_delete</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, object.o(.text.rt_object_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
</UL>

<P><STRONG><a name="[1d9]"></a>rt_object_detach</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, object.o(.text.rt_object_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = rt_object_detach &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
</UL>

<P><STRONG><a name="[1db]"></a>rt_object_find</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, object.o(.text.rt_object_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = rt_object_find &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>

<P><STRONG><a name="[1a6]"></a>rt_object_get_information</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, object.o(.text.rt_object_get_information))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>

<P><STRONG><a name="[158]"></a>rt_object_get_type</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, object.o(.text.rt_object_get_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_detach
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_free
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_alloc
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_backtrace
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_update_priority
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
</UL>

<P><STRONG><a name="[1df]"></a>rt_object_init</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, object.o(.text.rt_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = rt_object_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_init
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>

<P><STRONG><a name="[1d8]"></a>rt_object_is_systemobject</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, object.o(.text.rt_object_is_systemobject))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_free
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_alloc
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
</UL>

<P><STRONG><a name="[1aa]"></a>rt_pin_mode</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dev_pin.o(.text.rt_pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = rt_pin_mode &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1af]"></a>rt_pin_write</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dev_pin.o(.text.rt_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[171]"></a>rt_sched_insert_thread</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, scheduler_up.o(.text.rt_sched_insert_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = rt_sched_insert_thread &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_reset_priority
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_change_priority
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_ready
</UL>

<P><STRONG><a name="[15e]"></a>rt_sched_lock</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, scheduler_up.o(.text.rt_sched_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_sched_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_resume_all_irq
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_dequeue
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_close
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_resume_all
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_tick_increase
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_print
</UL>

<P><STRONG><a name="[1f5]"></a>rt_sched_remove_thread</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, scheduler_up.o(.text.rt_sched_remove_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = rt_sched_remove_thread &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_close
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_reset_priority
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_change_priority
</UL>

<P><STRONG><a name="[210]"></a>rt_sched_thread_bind_cpu</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scheduler_up.o(.text.rt_sched_thread_bind_cpu))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[173]"></a>rt_sched_thread_change_priority</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, scheduler_comm.o(.text.rt_sched_thread_change_priority))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = rt_sched_thread_change_priority &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_remove_thread
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_insert_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_update_priority
</UL>

<P><STRONG><a name="[20e]"></a>rt_sched_thread_close</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scheduler_comm.o(.text.rt_sched_thread_close))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_close
</UL>

<P><STRONG><a name="[15c]"></a>rt_sched_thread_get_curr_prio</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scheduler_comm.o(.text.rt_sched_thread_get_curr_prio))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_enqueue
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_update_priority
</UL>

<P><STRONG><a name="[163]"></a>rt_sched_thread_get_init_prio</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scheduler_comm.o(.text.rt_sched_thread_get_init_prio))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_update_priority
</UL>

<P><STRONG><a name="[20c]"></a>rt_sched_thread_get_stat</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, scheduler_comm.o(.text.rt_sched_thread_get_stat))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_close
</UL>

<P><STRONG><a name="[1f6]"></a>rt_sched_thread_init_ctx</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, scheduler_comm.o(.text.rt_sched_thread_init_ctx))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = rt_sched_thread_init_ctx &rArr; rt_sched_thread_init_priv &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_init_priv
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>

<P><STRONG><a name="[1f7]"></a>rt_sched_thread_init_priv</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, scheduler_up.o(.text.rt_sched_thread_init_priv))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = rt_sched_thread_init_priv &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_init_ctx
</UL>

<P><STRONG><a name="[170]"></a>rt_sched_thread_is_suspended</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, scheduler_comm.o(.text.rt_sched_thread_is_suspended))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_update_priority
</UL>

<P><STRONG><a name="[1f2]"></a>rt_sched_thread_ready</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, scheduler_comm.o(.text.rt_sched_thread_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rt_sched_thread_ready &rArr; rt_timer_stop &rArr;  rt_object_get_type (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_insert_thread
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_resume_all_irq
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_dequeue
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_resume_all
</UL>

<P><STRONG><a name="[1f9]"></a>rt_sched_thread_reset_priority</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, scheduler_comm.o(.text.rt_sched_thread_reset_priority))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = rt_sched_thread_reset_priority &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_remove_thread
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_insert_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[218]"></a>rt_sched_thread_startup</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scheduler_up.o(.text.rt_sched_thread_startup))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
</UL>

<P><STRONG><a name="[21a]"></a>rt_sched_thread_timer_start</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, scheduler_comm.o(.text.rt_sched_thread_timer_start))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
</UL>

<P><STRONG><a name="[1fa]"></a>rt_sched_thread_timer_stop</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, scheduler_comm.o(.text.rt_sched_thread_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr;  rt_object_get_type (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
</UL>

<P><STRONG><a name="[1fb]"></a>rt_sched_tick_increase</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, scheduler_comm.o(.text.rt_sched_tick_increase))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_sched_tick_increase &rArr; rt_sched_unlock_n_resched &rArr; rt_schedule &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock_n_resched
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[15f]"></a>rt_sched_unlock</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, scheduler_up.o(.text.rt_sched_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_sched_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_resume_all_irq
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_dequeue
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_close
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_resume_all
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_tick_increase
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_print
</UL>

<P><STRONG><a name="[172]"></a>rt_sched_unlock_n_resched</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, scheduler_up.o(.text.rt_sched_unlock_n_resched))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_sched_unlock_n_resched &rArr; rt_schedule &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_tick_increase
</UL>

<P><STRONG><a name="[162]"></a>rt_schedule</STRONG> (Thumb, 494 bytes, Stack size 32 bytes, scheduler_up.o(.text.rt_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = rt_schedule &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_interrupt
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_scheduler_stack_check
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_insert_thread
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cpu_self
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait_flags
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock_n_resched
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical_safe
</UL>

<P><STRONG><a name="[1fd]"></a>rt_scheduler_stack_check</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, scheduler_comm.o(.text.rt_scheduler_stack_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = rt_scheduler_stack_check &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[ee]"></a>rt_secure_svc_handle</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, trustzone.o(.text.rt_secure_svc_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = rt_secure_svc_handle &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tzcall_entry
</UL>

<P><STRONG><a name="[200]"></a>rt_sem_control</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, ipc.o(.text.rt_sem_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = rt_sem_control &rArr; rt_susp_list_resume_all &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_resume_all
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
</UL>

<P><STRONG><a name="[191]"></a>rt_sem_init</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, ipc.o(.text.rt_sem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = rt_sem_init &rArr; rt_object_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
</UL>

<P><STRONG><a name="[188]"></a>rt_sem_release</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, ipc.o(.text.rt_sem_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = rt_sem_release &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_ready
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_rx_ind
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[176]"></a>rt_sem_take</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ipc.o(.text.rt_sem_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = rt_sem_take &rArr; _rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_thread_entry
</UL>

<P><STRONG><a name="[1de]"></a>rt_set_errno</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, kerrno.o(.text.rt_set_errno))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>

<P><STRONG><a name="[202]"></a>rt_show_version</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, kservice.o(.text.rt_show_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = rt_show_version &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version
</UL>

<P><STRONG><a name="[1f0]"></a>rt_smem_alloc</STRONG> (Thumb, 456 bytes, Stack size 32 bytes, mem.o(.text.rt_smem_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>

<P><STRONG><a name="[1e4]"></a>rt_smem_free</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, mem.o(.text.rt_smem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = rt_smem_free &rArr; plug_holes &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[203]"></a>rt_smem_init</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, mem.o(.text.rt_smem_init), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init_generic
</UL>

<P><STRONG><a name="[204]"></a>rt_snprintf</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, kstdio.o(.text.rt_snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = rt_snprintf &rArr; rt_vsnprintf &rArr; print_floating_point &rArr; print_exponential_number &rArr; print_integer &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_hex_formater
</UL>

<P><STRONG><a name="[159]"></a>rt_spin_lock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpu_up.o(.text.rt_spin_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_spin_lock &rArr; rt_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
</UL>

<P><STRONG><a name="[1d1]"></a>rt_spin_lock_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpu_up.o(.text.rt_spin_lock_init))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_init
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
</UL>

<P><STRONG><a name="[165]"></a>rt_spin_lock_irqsave</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cpu_up.o(.text.rt_spin_lock_irqsave))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_spin_lock_irqsave &rArr; rt_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_deinit
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_resume_all_irq
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peek
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait_flags
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wakeup_by_errno
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_check
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_detach
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_enqueue
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_backend_register
</UL>

<P><STRONG><a name="[15b]"></a>rt_spin_unlock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu_up.o(.text.rt_spin_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_spin_unlock &rArr; rt_exit_critical_safe &rArr; rt_schedule &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical_safe
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
</UL>

<P><STRONG><a name="[166]"></a>rt_spin_unlock_irqrestore</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cpu_up.o(.text.rt_spin_unlock_irqrestore))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_schedule &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical_safe
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_deinit
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_resume_all_irq
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peek
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait_flags
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wakeup_by_errno
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_check
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_detach
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_enqueue
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_backend_register
</UL>

<P><STRONG><a name="[153]"></a>rt_strcmp</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, kstring.o(.text.rt_strcmp))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd
</UL>

<P><STRONG><a name="[1a8]"></a>rt_strerror</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, kerrno.o(.text.rt_strerror))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>

<P><STRONG><a name="[194]"></a>rt_strlen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, kstring.o(.text.rt_strlen))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kputs
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_tail_formater
</UL>

<P><STRONG><a name="[1f4]"></a>rt_strncmp</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, kstring.o(.text.rt_strncmp))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
</UL>

<P><STRONG><a name="[1b5]"></a>rt_strncpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, kstring.o(.text.rt_strncpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_hex_formater
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_backend_register
</UL>

<P><STRONG><a name="[1d4]"></a>rt_susp_list_dequeue</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ipc.o(.text.rt_susp_list_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = rt_susp_list_dequeue &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_ready
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
</UL>

<P><STRONG><a name="[205]"></a>rt_susp_list_enqueue</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, ipc.o(.text.rt_susp_list_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = rt_susp_list_enqueue &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_get_curr_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
</UL>

<P><STRONG><a name="[1a7]"></a>rt_susp_list_print</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ipc.o(.text.rt_susp_list_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = rt_susp_list_print &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
</UL>

<P><STRONG><a name="[201]"></a>rt_susp_list_resume_all</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, ipc.o(.text.rt_susp_list_resume_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = rt_susp_list_resume_all &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_ready
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
</UL>

<P><STRONG><a name="[1d6]"></a>rt_susp_list_resume_all_irq</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, ipc.o(.text.rt_susp_list_resume_all_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = rt_susp_list_resume_all_irq &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_ready
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
</UL>

<P><STRONG><a name="[1e8]"></a>rt_system_heap_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, kservice.o(.text.rt_system_heap_init))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[206]"></a>rt_system_heap_init_generic</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, kservice.o(.text.rt_system_heap_init_generic), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_backtrace
</UL>

<P><STRONG><a name="[21b]"></a>rt_system_scheduler_init</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, scheduler_up.o(.text.rt_system_scheduler_init))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[207]"></a>rt_system_scheduler_start</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, scheduler_up.o(.text.rt_system_scheduler_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_system_scheduler_start
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_to
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cpu_self
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[209]"></a>rt_system_timer_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, timer.o(.text.rt_system_timer_init))
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_init
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[20a]"></a>rt_system_timer_thread_init</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, timer.o(.text.rt_system_timer_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = rt_system_timer_thread_init &rArr; rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_init
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[169]"></a>rt_thread_close</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, thread.o(.text.rt_thread_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = rt_thread_close &rArr; rt_timer_detach &rArr; rt_object_detach &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_critical_level
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_remove_thread
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_close
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_get_stat
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cpu_self
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_detach
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
</UL>

<P><STRONG><a name="[151]"></a>rt_thread_control</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, thread.o(.text.rt_thread_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_bind_cpu
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_reset_priority
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_change_priority
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_libc_exit
</UL>

<P><STRONG><a name="[190]"></a>rt_thread_create</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, thread.o(.text.rt_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stack_init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_init_ctx
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[16c]"></a>rt_thread_defunct_enqueue</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defunct.o(.text.rt_thread_defunct_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_thread_defunct_enqueue &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_schedule &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_detach
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
</UL>

<P><STRONG><a name="[214]"></a>rt_thread_defunct_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, defunct.o(.text.rt_thread_defunct_init))
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_init
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[211]"></a>rt_thread_delete</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, thread.o(.text.rt_thread_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_detach
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[20f]"></a>rt_thread_detach</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, thread.o(.text.rt_thread_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = rt_thread_detach &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_detach
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[215]"></a>rt_thread_idle_init</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, idle.o(.text.rt_thread_idle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = rt_thread_idle_init &rArr; rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_init
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cpu_index
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[20b]"></a>rt_thread_init</STRONG> (Thumb, 252 bytes, Stack size 48 bytes, thread.o(.text.rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stack_init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_init_ctx
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
</UL>

<P><STRONG><a name="[1b0]"></a>rt_thread_mdelay</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, thread.o(.text.rt_thread_mdelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = rt_thread_mdelay &rArr; _thread_sleep &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1cb]"></a>rt_thread_resume</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, thread.o(.text.rt_thread_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = rt_thread_resume &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock_n_resched
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_ready
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wakeup_by_errno
</UL>

<P><STRONG><a name="[14f]"></a>rt_thread_self</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, thread.o(.text.rt_thread_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cpu_self
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait_flags
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_libc_exit
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_insert_thread
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_backtrace
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_backtrace
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock_n_resched
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical_safe
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_tick_increase
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memory_info
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_voutput
</UL>

<P><STRONG><a name="[192]"></a>rt_thread_startup</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, thread.o(.text.rt_thread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = rt_thread_startup &rArr; rt_thread_resume &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[15a]"></a>rt_thread_suspend_to_list</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, thread.o(.text.rt_thread_suspend_to_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + In Cycle
<LI>Call Chain = rt_thread_suspend_to_list &rArr;  rt_object_get_type (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_remove_thread
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_get_stat
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_timer_stop
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_enqueue
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cpu_self
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_with_flag
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
</UL>

<P><STRONG><a name="[1ca]"></a>rt_thread_suspend_with_flag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, thread.o(.text.rt_thread_suspend_with_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = rt_thread_suspend_with_flag &rArr; rt_thread_suspend_to_list &rArr;  rt_object_get_type (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait_flags
</UL>

<P><STRONG><a name="[217]"></a>rt_tick_from_millisecond</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock.o(.text.rt_tick_from_millisecond))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>

<P><STRONG><a name="[175]"></a>rt_tick_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, clock.o(.text.rt_tick_get))
<BR><BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_atomic_load
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_check
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
</UL>

<P><STRONG><a name="[14a]"></a>rt_tick_increase</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, clock.o(.text.rt_tick_increase))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = rt_tick_increase &rArr; rt_timer_check &rArr; rt_sem_release &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_atomic_add
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_tick_increase
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[219]"></a>rt_timer_check</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, timer.o(.text.rt_timer_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = rt_timer_check &rArr; rt_sem_release &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_check
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[160]"></a>rt_timer_control</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, timer.o(.text.rt_timer_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + In Cycle
<LI>Call Chain = rt_timer_control &rArr;  rt_object_get_type (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait_flags
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
</UL>

<P><STRONG><a name="[20d]"></a>rt_timer_detach</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, timer.o(.text.rt_timer_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = rt_timer_detach &rArr; rt_object_detach &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_close
</UL>

<P><STRONG><a name="[213]"></a>rt_timer_init</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, timer.o(.text.rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = rt_timer_init &rArr; rt_object_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>

<P><STRONG><a name="[161]"></a>rt_timer_start</STRONG> (Thumb, 484 bytes, Stack size 40 bytes, timer.o(.text.rt_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + In Cycle
<LI>Call Chain = rt_timer_start &rArr;  rt_object_get_type (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_timer_start
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait_flags
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
</UL>

<P><STRONG><a name="[1f8]"></a>rt_timer_stop</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, timer.o(.text.rt_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + In Cycle
<LI>Call Chain = rt_timer_stop &rArr;  rt_object_get_type (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_timer_stop
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_ready
</UL>

<P><STRONG><a name="[eb]"></a>rt_trustzone_context_load</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, trustzone.o(.text.rt_trustzone_context_load))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[ea]"></a>rt_trustzone_context_store</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, trustzone.o(.text.rt_trustzone_context_store))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[1ed]"></a>rt_vsnprintf</STRONG> (Thumb, 2008 bytes, Stack size 96 bytes, rt_vsnprintf_std.o(.text.rt_vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = rt_vsnprintf &rArr; print_floating_point &rArr; print_exponential_number &rArr; print_integer &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_rev_
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_integer
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_floating_point
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_formater
</UL>

<P><STRONG><a name="[108]"></a>rtthread_startup</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, components.o(.text.rtthread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040 + Unknown Stack Size
<LI>Call Chain = rtthread_startup &rArr; rt_hw_board_init &rArr; BOARD_InitBootClocks &rArr; BOARD_BootClockFRO96M &rArr; SPC_SetSRAMOperateVoltage &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_init
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21c]"></a>ulog_backend_register</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, ulog.o(.text.ulog_backend_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = ulog_backend_register &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_console_backend_init
</UL>

<P><STRONG><a name="[d0]"></a>ulog_console_backend_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, console_be.o(.text.ulog_console_backend_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = ulog_console_backend_init &rArr; ulog_init &rArr; rt_mutex_init &rArr; rt_object_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_backend_register
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console_be.o(.rti_fn.2)
</UL>
<P><STRONG><a name="[c5]"></a>ulog_console_backend_output</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, console_be.o(.text.ulog_console_backend_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ulog_console_backend_output &rArr; rt_kputs &rArr;  rt_device_write (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kputs
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_voutput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console_be.o(.text.ulog_console_backend_init)
</UL>
<P><STRONG><a name="[21d]"></a>ulog_formater</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, ulog.o(.text.ulog_formater))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + In Cycle
<LI>Call Chain = ulog_formater &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_tail_formater
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_head_formater
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_voutput
</UL>

<P><STRONG><a name="[21e]"></a>ulog_head_formater</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, ulog.o(.text.ulog_head_formater))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = ulog_head_formater &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_hex_formater
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_formater
</UL>

<P><STRONG><a name="[220]"></a>ulog_hex_formater</STRONG> (Thumb, 632 bytes, Stack size 56 bytes, ulog.o(.text.ulog_hex_formater))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = ulog_hex_formater &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_tail_formater
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_head_formater
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_voutput
</UL>

<P><STRONG><a name="[ce]"></a>ulog_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ulog.o(.text.ulog_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = ulog_init &rArr; rt_mutex_init &rArr; rt_object_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_console_backend_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ulog.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[150]"></a>ulog_output</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, ulog.o(.text.ulog_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = ulog_output &rArr; ulog_voutput &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_voutput
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_libc_exit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_scheduler_stack_check
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_backtrace_frame_unwind
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_backtrace_frame_get
</UL>

<P><STRONG><a name="[21f]"></a>ulog_tail_formater</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, ulog.o(.text.ulog_tail_formater))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = ulog_tail_formater &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_hex_formater
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_formater
</UL>

<P><STRONG><a name="[221]"></a>ulog_voutput</STRONG> (Thumb, 480 bytes, Stack size 64 bytes, ulog.o(.text.ulog_voutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = ulog_voutput &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_critical_level
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kputs
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_hex_formater
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_formater
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_console_backend_output
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>

<P><STRONG><a name="[ae]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[13f]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPADC_FinishAutoCalibration
</UL>

<P><STRONG><a name="[222]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1bd]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_exponential_number
</UL>

<P><STRONG><a name="[225]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[22a]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[13e]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_exponential_number
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPADC_FinishAutoCalibration
</UL>

<P><STRONG><a name="[228]"></a>_ddiv</STRONG> (Thumb, 560 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[279]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)

<P><STRONG><a name="[229]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dneq
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deq
</UL>

<P><STRONG><a name="[1bf]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_exponential_number
</UL>

<P><STRONG><a name="[22b]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1be]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_exponential_number
</UL>

<P><STRONG><a name="[27a]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[19f]"></a>__aeabi_l2d</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_l2d
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_components
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_exponential_number
</UL>

<P><STRONG><a name="[27b]"></a>_ll_sto_d</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltll), UNUSED)

<P><STRONG><a name="[13c]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPADC_FinishAutoCalibration
</UL>

<P><STRONG><a name="[27c]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[27d]"></a>__aeabi_cdcmpge</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dgeqf.o(x$fpl$dgeqf), UNUSED)

<P><STRONG><a name="[22c]"></a>_dcmpge</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dgeqf.o(x$fpl$dgeqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dgeq
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dgr
</UL>

<P><STRONG><a name="[27e]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[22d]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dls
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dleq
</UL>

<P><STRONG><a name="[27f]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[1a0]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_components
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_exponential_number
</UL>

<P><STRONG><a name="[22e]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[224]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sfrom_d
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[227]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[13d]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_components
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_exponential_number
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPADC_FinishAutoCalibration
</UL>

<P><STRONG><a name="[22f]"></a>_dsub</STRONG> (Thumb, 472 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1ae]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[231]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[280]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)

<P><STRONG><a name="[233]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[1a3]"></a>__aeabi_dcmpeq</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_components
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_exponential_number
</UL>

<P><STRONG><a name="[235]"></a>_deq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[236]"></a>_dneq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[1a2]"></a>__aeabi_dcmpgt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_components
</UL>

<P><STRONG><a name="[237]"></a>_dgr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[1c0]"></a>__aeabi_dcmpge</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmpge
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_exponential_number
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_floating_point
</UL>

<P><STRONG><a name="[238]"></a>_dgeq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[1a1]"></a>__aeabi_dcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_components
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_exponential_number
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_floating_point
</UL>

<P><STRONG><a name="[239]"></a>_dleq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[1a4]"></a>__aeabi_dcmplt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_components
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_exponential_number
</UL>

<P><STRONG><a name="[23a]"></a>_dls</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[140]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Stop
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPADC_FinishAutoCalibration
</UL>

<P><STRONG><a name="[23b]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[141]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPADC_FinishAutoCalibration
</UL>

<P><STRONG><a name="[23c]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[142]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Stop
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPADC_FinishAutoCalibration
</UL>

<P><STRONG><a name="[281]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[143]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Stop
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPADC_FinishAutoCalibration
</UL>

<P><STRONG><a name="[23d]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[232]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[223]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[144]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPADC_FinishAutoCalibration
</UL>

<P><STRONG><a name="[23e]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[19e]"></a>__aeabi_d2lz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixll.o(x$fpl$llsfromd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2lz
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_components
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_exponential_number
</UL>

<P><STRONG><a name="[240]"></a>_ll_sfrom_d</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, dfixll.o(x$fpl$llsfromd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[b1]"></a>_pin_read</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dev_pin.o(.text._pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = _pin_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_pin.o(.text.rt_device_pin_register)
</UL>
<P><STRONG><a name="[b2]"></a>_pin_write</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dev_pin.o(.text._pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = _pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_pin.o(.text.rt_device_pin_register)
</UL>
<P><STRONG><a name="[b3]"></a>_pin_control</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, dev_pin.o(.text._pin_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = _pin_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_pin.o(.text.rt_device_pin_register)
</UL>
<P><STRONG><a name="[d3]"></a>_pin_cmd</STRONG> (Thumb, 692 bytes, Stack size 16 bytes, dev_pin.o(.text._pin_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = _pin_cmd &rArr; _pin_cmd_print_usage &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_isint
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_print_usage
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_pin.o(FSymTab)
</UL>
<P><STRONG><a name="[152]"></a>_pin_cmd_print_usage</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, dev_pin.o(.text._pin_cmd_print_usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = _pin_cmd_print_usage &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd
</UL>

<P><STRONG><a name="[ba]"></a>rt_serial_init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dev_serial.o(.text.rt_serial_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = rt_serial_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_serial.o(.text.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[bb]"></a>rt_serial_open</STRONG> (Thumb, 612 bytes, Stack size 32 bytes, dev_serial.o(.text.rt_serial_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = rt_serial_open &rArr; rt_data_queue_init &rArr; rt_malloc &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_serial.o(.text.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[bc]"></a>rt_serial_close</STRONG> (Thumb, 394 bytes, Stack size 16 bytes, dev_serial.o(.text.rt_serial_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = rt_serial_close &rArr; rt_data_queue_deinit &rArr; rt_free &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_deinit
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_serial.o(.text.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[bd]"></a>rt_serial_read</STRONG> (Thumb, 896 bytes, Stack size 40 bytes, dev_serial.o(.text.rt_serial_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = rt_serial_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_serial.o(.text.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[be]"></a>rt_serial_write</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, dev_serial.o(.text.rt_serial_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = rt_serial_write &rArr; rt_data_queue_push &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_serial.o(.text.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[bf]"></a>rt_serial_control</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, dev_serial.o(.text.rt_serial_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = rt_serial_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_serial.o(.text.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[b4]"></a>mcx_pin_mode</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, drv_pin.o(.text.mcx_pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = mcx_pin_mode &rArr; GPIO_PinInit &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pin.o(.text.rt_hw_pin_init)
</UL>
<P><STRONG><a name="[b5]"></a>mcx_pin_write</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, drv_pin.o(.text.mcx_pin_write))
<BR>[Address Reference Count : 1]<UL><LI> drv_pin.o(.text.rt_hw_pin_init)
</UL>
<P><STRONG><a name="[b6]"></a>mcx_pin_read</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, drv_pin.o(.text.mcx_pin_read))
<BR>[Address Reference Count : 1]<UL><LI> drv_pin.o(.text.rt_hw_pin_init)
</UL>
<P><STRONG><a name="[b7]"></a>mcx_pin_attach_irq</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, drv_pin.o(.text.mcx_pin_attach_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mcx_pin_attach_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pin.o(.text.rt_hw_pin_init)
</UL>
<P><STRONG><a name="[b8]"></a>mcx_pin_detach_irq</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, drv_pin.o(.text.mcx_pin_detach_irq))
<BR>[Address Reference Count : 1]<UL><LI> drv_pin.o(.text.rt_hw_pin_init)
</UL>
<P><STRONG><a name="[b9]"></a>mcx_pin_irq_enable</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, drv_pin.o(.text.mcx_pin_irq_enable))
<BR>[Address Reference Count : 1]<UL><LI> drv_pin.o(.text.rt_hw_pin_init)
</UL>
<P><STRONG><a name="[c6]"></a>mcx_configure</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, drv_uart.o(.text.mcx_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032 + Unknown Stack Size
<LI>Call Chain = mcx_configure &rArr; LPUART_Init &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetClockDiv
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_AttachClk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart.o(.rodata.mcx_uart_ops)
</UL>
<P><STRONG><a name="[c7]"></a>mcx_control</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, drv_uart.o(.text.mcx_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = mcx_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_EnableInterrupts
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_DisableInterrupts
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart.o(.rodata.mcx_uart_ops)
</UL>
<P><STRONG><a name="[c8]"></a>mcx_putc</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, drv_uart.o(.text.mcx_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mcx_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart.o(.rodata.mcx_uart_ops)
</UL>
<P><STRONG><a name="[c9]"></a>mcx_getc</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, drv_uart.o(.text.mcx_getc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mcx_getc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart.o(.rodata.mcx_uart_ops)
</UL>
<P><STRONG><a name="[af]"></a>finsh_rx_ind</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, shell.o(.text.finsh_rx_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = finsh_rx_ind &rArr; rt_sem_release &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.text.finsh_set_device)
</UL>
<P><STRONG><a name="[b0]"></a>finsh_thread_entry</STRONG> (Thumb, 1508 bytes, Stack size 0 bytes, shell.o(.text.finsh_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = finsh_thread_entry &rArr; msh_exec &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_get_device
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_auto_complete
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memmove
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.text.finsh_system_init)
</UL>
<P><STRONG><a name="[19c]"></a>shell_handle_history</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, shell.o(.text.shell_handle_history))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = shell_handle_history &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[d4]"></a>msh_help</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, msh.o(.text.msh_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = msh_help &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[d5]"></a>cmd_ps</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, msh.o(.text.cmd_ps))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = cmd_ps &rArr; list_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[d6]"></a>cmd_free</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, msh.o(.text.cmd_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = cmd_free &rArr; rt_memory_info &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memory_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[d7]"></a>clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmd.o(.text.clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = clear &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[d8]"></a>version</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(.text.version))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = version &rArr; rt_show_version &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[d9]"></a>cmd_list</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, cmd.o(.text.cmd_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = cmd_list &rArr; list_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_list_dump
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_opt_id_get
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[ca]"></a>rti_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text.rti_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0)
</UL>
<P><STRONG><a name="[cb]"></a>rti_board_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text.rti_board_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0.end)
</UL>
<P><STRONG><a name="[cf]"></a>rti_board_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text.rti_board_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.1.end)
</UL>
<P><STRONG><a name="[d2]"></a>rti_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text.rti_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.6.end)
</UL>
<P><STRONG><a name="[c4]"></a>main_thread_entry</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, components.o(.text.main_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208 + Unknown Stack Size
<LI>Call Chain = main_thread_entry &rArr; $Super$$main &rArr; ADC_DMA_Timer_Init &rArr; EDMA_PrepareTransfer &rArr; EDMA_PrepareTransferConfig &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> components.o(.text.rtthread_startup)
</UL>
<P><STRONG><a name="[c3]"></a>idle_thread_entry</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, idle.o(.text.idle_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = idle_thread_entry &rArr; rt_defunct_execute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> idle.o(.text.rt_thread_idle_init)
</UL>
<P><STRONG><a name="[164]"></a>_rt_sem_take</STRONG> (Thumb, 406 bytes, Stack size 32 bytes, ipc.o(.text._rt_sem_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = _rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_critical_level
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>

<P><STRONG><a name="[15d]"></a>_thread_update_priority</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, ipc.o(.text._thread_update_priority))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + In Cycle
<LI>Call Chain = _thread_update_priority &rArr;  rt_object_get_type (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_is_suspended
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_change_priority
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_get_init_prio
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_get_curr_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
</UL>

<P><STRONG><a name="[155]"></a>_rt_mutex_take</STRONG> (Thumb, 716 bytes, Stack size 40 bytes, ipc.o(.text._rt_mutex_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + In Cycle
<LI>Call Chain = _rt_mutex_take &rArr;  rt_object_get_type (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_critical_level
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_get_init_prio
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_get_curr_prio
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_update_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>

<P><STRONG><a name="[da]"></a>cmd_backtrace</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, kservice.o(.text.cmd_backtrace))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = cmd_backtrace &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_backtrace_frame
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_backtrace_frame_get
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_backtrace
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kservice.o(FSymTab)
</UL>
<P><STRONG><a name="[1b8]"></a>plug_holes</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, mem.o(.text.plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = plug_holes &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_free
</UL>

<P><STRONG><a name="[c1]"></a>_thread_exit</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, thread.o(.text._thread_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = _thread_exit &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_close
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_enqueue
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cpu_self
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical_safe
</UL>
<BR>[Address Reference Count : 2]<UL><LI> thread.o(.text.rt_thread_create)
<LI> thread.o(.text.rt_thread_init)
</UL>
<P><STRONG><a name="[c2]"></a>_thread_timeout</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, thread.o(.text._thread_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = _thread_timeout &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_insert_thread
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_is_suspended
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock_n_resched
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
</UL>
<BR>[Address Reference Count : 2]<UL><LI> thread.o(.text.rt_thread_create)
<LI> thread.o(.text.rt_thread_init)
</UL>
<P><STRONG><a name="[167]"></a>_thread_detach</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, thread.o(.text._thread_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = _thread_detach &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_close
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_enqueue
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical_safe
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
</UL>

<P><STRONG><a name="[16f]"></a>_thread_sleep</STRONG> (Thumb, 304 bytes, Stack size 32 bytes, thread.o(.text._thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = _thread_sleep &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_critical_level
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cpu_self
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical_safe
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>

<P><STRONG><a name="[174]"></a>_timer_check</STRONG> (Thumb, 336 bytes, Stack size 48 bytes, timer.o(.text._timer_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _timer_check &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_schedule &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_thread_entry
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[c0]"></a>_timer_thread_entry</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, timer.o(.text._timer_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = _timer_thread_entry &rArr; rt_sem_take &rArr; _rt_sem_take &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.text.rt_system_timer_thread_init)
</UL>
<P><STRONG><a name="[1c2]"></a>print_floating_point</STRONG> (Thumb, 292 bytes, Stack size 128 bytes, rt_vsnprintf_std.o(.text.print_floating_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = print_floating_point &rArr; print_exponential_number &rArr; print_integer &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_broken_up_decimal
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_components
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_exponential_number
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_rev_
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[1c1]"></a>print_integer</STRONG> (Thumb, 446 bytes, Stack size 80 bytes, rt_vsnprintf_std.o(.text.print_integer))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = print_integer &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_rev_
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_exponential_number
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[1bb]"></a>out_rev_</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, rt_vsnprintf_std.o(.text.out_rev_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = out_rev_
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_broken_up_decimal
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_integer
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_floating_point
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[1bc]"></a>print_exponential_number</STRONG> (Thumb, 1794 bytes, Stack size 152 bytes, rt_vsnprintf_std.o(.text.print_exponential_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = print_exponential_number &rArr; print_integer &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_broken_up_decimal
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_components
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_integer
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpeq
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_floating_point
</UL>

<P><STRONG><a name="[19d]"></a>get_components</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, rt_vsnprintf_std.o(.text.get_components))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = get_components &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpeq
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_exponential_number
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_floating_point
</UL>

<P><STRONG><a name="[1b9]"></a>print_broken_up_decimal</STRONG> (Thumb, 556 bytes, Stack size 40 bytes, rt_vsnprintf_std.o(.text.print_broken_up_decimal))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = print_broken_up_decimal &rArr; out_rev_
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_rev_
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_exponential_number
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_floating_point
</UL>

<P><STRONG><a name="[ed]"></a>tzcall_entry</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, syscall_rvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = tzcall_entry &rArr; rt_secure_svc_handle &rArr; rt_kprintf &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_secure_svc_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[ef]"></a>syscall_entry</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, syscall_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[230]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[226]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[23f]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[234]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
